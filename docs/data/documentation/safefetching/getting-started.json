{"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This article uses the following managed object."}]},{"type":"codeListing","code":["@objc(User)","final class User: NSManagedObject {","    @NSManaged var name: String","    @NSManaged var score: Int32","}"],"syntax":"swift"},{"type":"heading","anchor":"Conform-to-Fetchable","level":3,"text":"Conform to Fetchable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first step to use SafeFetching with "},{"type":"codeVoice","code":"User"},{"type":"text","text":" is to make it conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable"},{"type":"text","text":"."}]},{"type":"codeListing","code":["extension User: Fetchable {","","    static var fetchableMembers: FetchableMembers { fetchableMembers }","","    struct FetchableMembers {","        let name = FetchableMember<User, String>(identifier: \"name\")","        let score = FetchableMember<User, Int32>(identifier: \"score\")","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"It’s also possible to use the ","type":"text"},{"code":"FetchableManagedObject","type":"codeVoice"},{"text":" macro directly.","type":"text"}]},{"type":"codeListing","code":["@FetchableManagedObject","@objc(User)","final class User: NSManagedObject {","    @NSManaged var name: String","    @NSManaged var score: Int32","}"],"syntax":"swift"},{"type":"aside","name":"Tip","content":[{"type":"paragraph","inlineContent":[{"text":"When using the macro, it’s possible to extend ","type":"text"},{"code":"User.FetchableMembers","type":"codeVoice"},{"text":" to add attributes or relationships that the macro cannot find in the declarations, such as when the property is defined in a parent class.","type":"text"}]}],"style":"tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To ignore an attribute or a relationship when using the "},{"type":"codeVoice","code":"FetchableManagedObject"},{"type":"text","text":" macro, annotate it with "},{"type":"codeVoice","code":"@FetchingIgnored"},{"type":"text","text":". This will effectively not generate a "},{"type":"codeVoice","code":"FetchableMember"},{"type":"text","text":" for the annotated property."}]},{"type":"heading","anchor":"Fetch-User","level":3,"text":"Fetch User"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once "},{"type":"codeVoice","code":"User"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Fetchable"},{"type":"text","text":", it gains the static function "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable\/request()"},{"type":"text","text":" to start building a fetch request. It’s then possible to specify that all "},{"type":"codeVoice","code":"User"},{"type":"text","text":" entries should be fetched or just one, filter them using predicates and so on."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, here is a statement to fetch all users."}]},{"type":"codeListing","code":["try User.request().all().fetch(in: context) \/\/ [User]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Where "},{"type":"codeVoice","code":"context"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"NSManagedObjectContext"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"To filter the ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" with a predicate, add a ","type":"text"},{"type":"codeVoice","code":"where(_:)"},{"text":" call after ","type":"text"},{"type":"codeVoice","code":"all()"},{"text":".","type":"text"}]},{"type":"codeListing","code":["try User.request()","    .all()","    .where { $0.name.hasPrefix(\"Anna\") }","    .fetch(in: context) \/\/ [User]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"where(_:)","type":"codeVoice"},{"text":" expects a predicate built on the provided ","type":"text"},{"code":"User.FetchableMembers","type":"codeVoice"},{"text":" that is then converted to a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" with the appropriate format. The predicate is built using operators overloads or extensions on ","type":"text"},{"code":"FetchableMember","type":"codeVoice"},{"text":". Writing more complex predicates still feels natural.","type":"text"}]},{"type":"codeListing","code":["try User.request()","    .all()","    .where { $0.name.hasPrefix(\"Anna\") && $0.score < 10 }","    .fetch(in: context) \/\/ [User]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, by importing "},{"code":"SafeFetching","type":"codeVoice"},{"type":"text","text":" with "},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"type":"text","text":", more convenience functions are available such as extensions on collections to make the predicates even closer to Swift syntax, while still generating the proper format for "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","code":["@_spi(SafeFetching) import SafeFetching","","let scores: [Int32] = [10, 20, 30]","try User.request()","    .all()","    .where { scores.contains($0.score) }","    .fetch(in: context) \/\/ [User]"],"syntax":"swift"},{"type":"heading","anchor":"Whats-Next","level":3,"text":"What’s Next"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Learn more about predicates by reading "},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Learn more about request building by reading "},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-requests","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"metadata":{"title":"Using SafeFetching: Getting Started","roleHeading":"Article","modules":[{"name":"SafeFetching"}],"role":"article"},"identifier":{"url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/getting-started","interfaceLanguage":"swift"},"kind":"article","abstract":[{"text":"Quick overview to start using SafeFetching and write fetch requests the easy way.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/safefetching\/getting-started"]}],"sections":[],"references":{"doc://SafeFetching/documentation/SafeFetching/build-requests":{"type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-requests","title":"Build Requests","kind":"article","role":"article","abstract":[{"text":"Learn how to build requests with the SafeFetching DSL.","type":"text"}],"url":"\/documentation\/safefetching\/build-requests"},"doc://SafeFetching/documentation/SafeFetching/Fetchable":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Fetchable"}],"title":"Fetchable","role":"symbol","abstract":[{"type":"text","text":"Implemented by a "},{"type":"codeVoice","code":"NSManagedObject"},{"type":"text","text":" to offer fetching using SafeFetching API."}],"url":"\/documentation\/safefetching\/fetchable","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Fetchable"}]},"doc://SafeFetching/documentation/SafeFetching/Fetchable/request()":{"url":"\/documentation\/safefetching\/fetchable\/request()","abstract":[{"type":"text","text":"Starts building a request."}],"kind":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable\/request()","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"request"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:12SafeFetching8BuildersO","kind":"typeIdentifier","text":"Builders"},{"kind":"text","text":"."},{"text":"PreRequest","preciseIdentifier":"s:12SafeFetching8BuildersO10PreRequestV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"CreationStep","preciseIdentifier":"s:12SafeFetching12CreationStepO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","title":"request()","role":"symbol"},"doc://SafeFetching/documentation/SafeFetching/build-predicates":{"title":"Build Predicates","type":"topic","abstract":[{"text":"Learn how to specify safe predicates safely when building a request.","type":"text"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates","kind":"article","url":"\/documentation\/safefetching\/build-predicates","role":"article"},"doc://SafeFetching/documentation/SafeFetching":{"kind":"symbol","type":"topic","title":"SafeFetching","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","abstract":[{"type":"text","text":"Convenience functions around "},{"type":"codeVoice","code":"CoreData"},{"type":"text","text":" fetching."}],"url":"\/documentation\/safefetching","role":"collection"}}}