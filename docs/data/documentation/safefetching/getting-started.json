{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/safefetching\/getting-started"]}],"metadata":{"roleHeading":"Article","title":"Using SafeFetching: Getting Started","role":"article","modules":[{"name":"SafeFetching"}]},"kind":"article","abstract":[{"type":"text","text":"Quick overview to start using SafeFetching and write fetch requests the easy way."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/getting-started"},"sections":[],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This article uses the following managed object."}]},{"type":"codeListing","syntax":"swift","code":["@objc(User)","final class User: NSManagedObject {","    @NSManaged var name: String","    @NSManaged var score: Int32","}"]},{"type":"heading","level":3,"anchor":"Conform-to-Fetchable","text":"Conform to Fetchable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first step to use SafeFetching with "},{"type":"codeVoice","code":"User"},{"type":"text","text":" is to make it conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["extension User: Fetchable {","","    static var fetchableMembers: FetchableMembers { fetchableMembers }","","    struct FetchableMembers {","        let name = FetchableMember<User, String>(identifier: \"name\")","        let score = FetchableMember<User, Int32>(identifier: \"score\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s also possible to use the "},{"code":"FetchableManagedObject","type":"codeVoice"},{"type":"text","text":" macro directly."}]},{"type":"codeListing","syntax":"swift","code":["@FetchableManagedObject","@objc(User)","final class User: NSManagedObject {","    @NSManaged var name: String","    @NSManaged var score: Int32","}"]},{"content":[{"type":"paragraph","inlineContent":[{"text":"When using the macro, it’s possible to extend ","type":"text"},{"code":"User.FetchableMembers","type":"codeVoice"},{"text":" to add attributes or relationships that the macro cannot find in the declarations, such as when the property is defined in a parent class.","type":"text"}]}],"type":"aside","name":"Tip","style":"tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To ignore an attribute or a relationship when using the "},{"type":"codeVoice","code":"FetchableManagedObject"},{"type":"text","text":" macro, annotate it with "},{"type":"codeVoice","code":"@FetchingIgnored"},{"type":"text","text":". This will effectively not generate a "},{"type":"codeVoice","code":"FetchableMember"},{"type":"text","text":" for the annotated property."}]},{"type":"heading","level":3,"anchor":"Fetch-User","text":"Fetch User"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once "},{"type":"codeVoice","code":"User"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Fetchable"},{"text":", it gains the static function ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable\/request()","type":"reference","isActive":true},{"text":" to start building a fetch request. It’s then possible to specify that all ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" entries should be fetched or just one, filter them using predicates and so on.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, here is a statement to fetch all users."}]},{"code":["try User.request().all().fetch(in: context) \/\/ [User]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Where "},{"type":"codeVoice","code":"context"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"NSManagedObjectContext"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"To filter ","type":"text"},{"code":"User","type":"codeVoice"},{"type":"text","text":" with a predicate, add a "},{"type":"codeVoice","code":"where(_:)"},{"type":"text","text":" call after "},{"type":"codeVoice","code":"all()"},{"type":"text","text":"."}]},{"code":["try User.request()","    .all()","    .where { $0.name.hasPrefix(\"Anna\") }","    .fetch(in: context) \/\/ [User]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"where(_:)","type":"codeVoice"},{"text":" expects a predicate built on the provided ","type":"text"},{"code":"User.FetchableMembers","type":"codeVoice"},{"text":" that is then converted to a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" with the appropriate format. The predicate is built using operators overloads or extensions on ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","isActive":true,"type":"reference"},{"text":". Writing more complex predicates still feels natural.","type":"text"}]},{"code":["try User.request()","    .all()","    .where { $0.name.hasPrefix(\"Anna\") && $0.score < 10 }","    .fetch(in: context) \/\/ [User]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Finally, by importing ","type":"text"},{"code":"SafeFetching","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"text":", more convenience functions are available such as extensions on collections to make the predicates even closer to Swift syntax, while still generating the proper format for ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":".","type":"text"}]},{"code":["@_spi(SafeFetching) import SafeFetching","","let scores: [Int32] = [10, 20, 30]","try User.request()","    .all()","    .where { scores.contains($0.score) }","    .fetch(in: context) \/\/ [User]"],"type":"codeListing","syntax":"swift"},{"text":"What’s Next","level":3,"anchor":"Whats-Next","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Learn more about predicates by reading "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Learn more about request building by reading ","type":"text"},{"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-requests","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"references":{"doc://SafeFetching/documentation/SafeFetching/FetchableMember":{"kind":"symbol","url":"\/documentation\/safefetching\/fetchablemember","abstract":[{"text":"Stores types and identifier of an entity and attribute or relationship that can be used for fetching.","type":"text"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","title":"FetchableMember","navigatorTitle":[{"text":"FetchableMember","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FetchableMember","kind":"identifier"}],"type":"topic"},"doc://SafeFetching/documentation/SafeFetching/build-predicates":{"abstract":[{"type":"text","text":"Learn how to safely specify predicates when building a request."}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates","url":"\/documentation\/safefetching\/build-predicates","kind":"article","role":"article","title":"Build Predicates","type":"topic"},"doc://SafeFetching/documentation/SafeFetching/build-requests":{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-requests","abstract":[{"text":"Learn how to build requests with the SafeFetching DSL.","type":"text"}],"url":"\/documentation\/safefetching\/build-requests","title":"Build Requests","role":"article","type":"topic","kind":"article"},"doc://SafeFetching/documentation/SafeFetching/Fetchable":{"navigatorTitle":[{"kind":"identifier","text":"Fetchable"}],"url":"\/documentation\/safefetching\/fetchable","abstract":[{"text":"Implemented by a ","type":"text"},{"code":"NSManagedObject","type":"codeVoice"},{"text":" to offer fetching using SafeFetching API.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Fetchable"}],"title":"Fetchable","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable"},"doc://SafeFetching/documentation/SafeFetching":{"role":"collection","abstract":[{"text":"Convenience functions around ","type":"text"},{"type":"codeVoice","code":"CoreData"},{"text":" fetching.","type":"text"}],"title":"SafeFetching","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","url":"\/documentation\/safefetching","type":"topic","kind":"symbol"},"doc://SafeFetching/documentation/SafeFetching/Fetchable/request()":{"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable\/request()","url":"\/documentation\/safefetching\/fetchable\/request()","abstract":[{"type":"text","text":"Starts building a request."}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"request"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Builders","preciseIdentifier":"s:12SafeFetching8BuildersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"PreRequest","preciseIdentifier":"s:12SafeFetching8BuildersO10PreRequestV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"CreationStep","preciseIdentifier":"s:12SafeFetching12CreationStepO"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"title":"request()"}}}