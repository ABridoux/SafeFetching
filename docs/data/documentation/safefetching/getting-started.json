{"abstract":[{"text":"Quick overview to start using SafeFetching and write fetch requests the easy way.","type":"text"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This article uses the following managed object."}]},{"syntax":"swift","code":["@objc(User)","final class User: NSManagedObject {","    @NSManaged var name: String","    @NSManaged var score: Int32","}"],"type":"codeListing"},{"level":3,"text":"Conform to Fetchable","anchor":"Conform-to-Fetchable","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first step to use SafeFetching with "},{"code":"User","type":"codeVoice"},{"type":"text","text":" is to make it conform to "},{"isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable","type":"reference"},{"type":"text","text":"."}]},{"syntax":"swift","code":["extension User: Fetchable {","","    static var fetchableMembers: FetchableMembers { fetchableMembers }","","    struct FetchableMembers {","        let name = FetchableMember<User, String>(identifier: \"name\")","        let score = FetchableMember<User, Int32>(identifier: \"score\")","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"It’s also possible to use the ","type":"text"},{"code":"FetchableManagedObject","type":"codeVoice"},{"text":" macro directly.","type":"text"}]},{"syntax":"swift","code":["@FetchableManagedObject","@objc(User)","final class User: NSManagedObject {","    @NSManaged var name: String","    @NSManaged var score: Int32","}"],"type":"codeListing"},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"text":"When using the macro, it’s possible to extend ","type":"text"},{"code":"User.FetchableMembers","type":"codeVoice"},{"text":" to add attributes or relationships that the macro cannot find in the declarations, such as when the property is defined in a parent class.","type":"text"}]}],"name":"Tip","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"To ignore an attribute or a relationship when using the ","type":"text"},{"code":"FetchableManagedObject","type":"codeVoice"},{"type":"text","text":" macro, annotate it with "},{"code":"@FetchingIgnored","type":"codeVoice"},{"type":"text","text":". This will effectively not generate a "},{"code":"FetchableMember","type":"codeVoice"},{"type":"text","text":" for the annotated property."}]},{"anchor":"Fetch-User","type":"heading","level":3,"text":"Fetch User"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once "},{"code":"User","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Fetchable","type":"codeVoice"},{"type":"text","text":", it gains the static function "},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable\/request()","isActive":true,"type":"reference"},{"type":"text","text":" to start building a fetch request. It’s then possible to specify that all "},{"code":"User","type":"codeVoice"},{"type":"text","text":" entries should be fetched or just one, filter them using predicates and so on."}]},{"type":"paragraph","inlineContent":[{"text":"For instance, here is a statement to fetch all users.","type":"text"}]},{"syntax":"swift","code":["try User.request().all().fetch(in: context) \/\/ [User]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Where ","type":"text"},{"code":"context","type":"codeVoice"},{"text":" is a ","type":"text"},{"code":"NSManagedObjectContext","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To filter the ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" with a predicate, add a ","type":"text"},{"code":"where(_:)","type":"codeVoice"},{"text":" call after ","type":"text"},{"code":"all()","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":"swift","code":["try User.request()","    .all()","    .where { $0.name.hasPrefix(\"Anna\") }","    .fetch(in: context) \/\/ [User]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"where(_:)"},{"text":" expects a predicate built on the provided ","type":"text"},{"code":"User.FetchableMembers","type":"codeVoice"},{"text":" that is then converted to a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" with the appropriate format. The predicate is built using operators overloads or extensions on ","type":"text"},{"code":"FetchableMember","type":"codeVoice"},{"text":". Writing more complex predicates still feels natural.","type":"text"}]},{"type":"codeListing","code":["try User.request()","    .all()","    .where { $0.name.hasPrefix(\"Anna\") && $0.score < 10 }","    .fetch(in: context) \/\/ [User]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Finally, by importing ","type":"text"},{"code":"SafeFetching","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"text":", more convenience functions are available such as extensions on collections to make the predicates even closer to Swift syntax, while still generating the proper format for ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["@_spi(SafeFetching) import SafeFetching","","let scores: [Int32] = [10, 20, 30]","try User.request()","    .all()","    .where { scores.contains($0.score) }","    .fetch(in: context) \/\/ [User]"],"syntax":"swift"},{"anchor":"Whats-Next","type":"heading","level":3,"text":"What’s Next"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn more about predicates by reading "},{"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Learn more about request building by reading ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-requests","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/safefetching\/getting-started"]}],"metadata":{"role":"article","title":"Using SafeFetching: Getting Started","roleHeading":"Article","modules":[{"name":"SafeFetching"}]},"kind":"article","hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/getting-started"},"references":{"doc://SafeFetching/documentation/SafeFetching/Fetchable":{"title":"Fetchable","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Fetchable","kind":"identifier"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Fetchable","kind":"identifier"}],"abstract":[{"type":"text","text":"Implemented by a "},{"type":"codeVoice","code":"NSManagedObject"},{"type":"text","text":" to offer fetching using SafeFetching API."}],"url":"\/documentation\/safefetching\/fetchable"},"doc://SafeFetching/documentation/SafeFetching":{"role":"collection","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","kind":"symbol","abstract":[{"type":"text","text":"Convenience functions around "},{"type":"codeVoice","code":"CoreData"},{"type":"text","text":" fetching."}],"type":"topic","title":"SafeFetching","url":"\/documentation\/safefetching"},"doc://SafeFetching/documentation/SafeFetching/build-predicates":{"title":"Build Predicates","abstract":[{"type":"text","text":"Learn how to specify safe predicates safely when building a request."}],"kind":"article","type":"topic","url":"\/documentation\/safefetching\/build-predicates","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates","role":"article"},"doc://SafeFetching/documentation/SafeFetching/build-requests":{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-requests","abstract":[{"text":"Learn how to build requests with the SafeFetching DSL.","type":"text"}],"url":"\/documentation\/safefetching\/build-requests","kind":"article","type":"topic","title":"Build Requests","role":"article"},"doc://SafeFetching/documentation/SafeFetching/Fetchable/request()":{"url":"\/documentation\/safefetching\/fetchable\/request()","kind":"symbol","type":"topic","title":"request()","role":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable\/request()","abstract":[{"type":"text","text":"Starts building a request."}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"request","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Builders","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO"},{"text":".","kind":"text"},{"text":"PreRequest","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO10PreRequestV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"CreationStep","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching12CreationStepO"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]}}}