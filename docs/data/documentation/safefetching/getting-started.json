{"sections":[],"kind":"article","primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This article uses the following managed object."}]},{"type":"codeListing","code":["@objc(User)","final class User: NSManagedObject {","    @NSManaged var name: String","    @NSManaged var score: Int32","}"],"syntax":"swift"},{"level":3,"type":"heading","text":"Conform to Fetchable","anchor":"Conform-to-Fetchable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first step to use SafeFetching with "},{"type":"codeVoice","code":"User"},{"type":"text","text":" is to make it conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable"},{"type":"text","text":"."}]},{"type":"codeListing","code":["extension User: Fetchable {","","    static var fetchableMembers: FetchableMembers { fetchableMembers }","","    struct FetchableMembers {","        let name = FetchableMember<User, String>(identifier: \"name\")","        let score = FetchableMember<User, Int32>(identifier: \"score\")","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"It’s also possible to use the ","type":"text"},{"code":"FetchableManagedObject","type":"codeVoice"},{"text":" macro directly.","type":"text"}]},{"type":"codeListing","code":["@FetchableManagedObject","@objc(User)","final class User: NSManagedObject {","    @NSManaged var name: String","    @NSManaged var score: Int32","}"],"syntax":"swift"},{"type":"aside","name":"Tip","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When using the macro, it’s possible to extend "},{"type":"codeVoice","code":"User.FetchableMembers"},{"type":"text","text":" to add attributes or relationships that the macro cannot find in the declarations, such as when the property is defined in a parent class."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To ignore an attribute or a relationship when using the "},{"type":"codeVoice","code":"FetchableManagedObject"},{"type":"text","text":" macro, annotate it with "},{"type":"codeVoice","code":"@FetchingIgnored"},{"type":"text","text":". This will effectively not generate a "},{"type":"codeVoice","code":"FetchableMember"},{"type":"text","text":" for the annotated property."}]},{"level":3,"type":"heading","text":"Fetch User","anchor":"Fetch-User"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once "},{"type":"codeVoice","code":"User"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Fetchable"},{"type":"text","text":", it gains the static function "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable\/request()"},{"type":"text","text":" to start building a fetch request. It’s then possible to specify that all "},{"type":"codeVoice","code":"User"},{"type":"text","text":" entries should be fetched or just one, filter them using predicates and so on."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, here is a statement to fetch all users."}]},{"type":"codeListing","code":["try User.request().all().fetch(in: context) \/\/ [User]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Where "},{"type":"codeVoice","code":"context"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"NSManagedObjectContext"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"To filter ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" with a predicate, add a ","type":"text"},{"code":"where(_:)","type":"codeVoice"},{"text":" call after ","type":"text"},{"code":"all()","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["try User.request()","    .all()","    .where { $0.name.hasPrefix(\"Anna\") }","    .fetch(in: context) \/\/ [User]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"where(_:)"},{"type":"text","text":" expects a predicate built on the provided "},{"type":"codeVoice","code":"User.FetchableMembers"},{"type":"text","text":" that is then converted to a "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" with the appropriate format. The predicate is built using operators overloads or extensions on "},{"isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","type":"reference"},{"type":"text","text":". Writing more complex predicates still feels natural."}]},{"type":"codeListing","code":["try User.request()","    .all()","    .where { $0.name.hasPrefix(\"Anna\") && $0.score < 10 }","    .fetch(in: context) \/\/ [User]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, by importing "},{"type":"codeVoice","code":"SafeFetching"},{"type":"text","text":" with "},{"type":"codeVoice","code":"@_spi(SafeFetching)"},{"type":"text","text":", more convenience functions are available such as extensions on collections to make the predicates even closer to Swift syntax, while still generating the proper format for "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":"."}]},{"type":"codeListing","code":["@_spi(SafeFetching) import SafeFetching","","let scores: [Int32] = [10, 20, 30]","try User.request()","    .all()","    .where { scores.contains($0.score) }","    .fetch(in: context) \/\/ [User]"],"syntax":"swift"},{"level":3,"type":"heading","text":"Where to Go Next","anchor":"Where-to-Go-Next"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Learn more about predicates by reading ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn more about request building by reading "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-requests"},{"type":"text","text":"."}]}]}]}],"kind":"content"}],"metadata":{"title":"Using SafeFetching: Getting Started","modules":[{"name":"SafeFetching"}],"roleHeading":"Article","role":"article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/getting-started","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"abstract":[{"type":"text","text":"Quick overview to start using SafeFetching and write fetch requests the easy way."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/safefetching\/getting-started"]}],"references":{"doc://SafeFetching/documentation/SafeFetching/build-requests":{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-requests","role":"article","url":"\/documentation\/safefetching\/build-requests","kind":"article","abstract":[{"type":"text","text":"Learn how to build requests with the SafeFetching DSL."}],"title":"Build Requests","type":"topic"},"doc://SafeFetching/documentation/SafeFetching":{"abstract":[{"text":"Convenience functions around ","type":"text"},{"type":"codeVoice","code":"CoreData"},{"text":" fetching.","type":"text"}],"kind":"symbol","title":"SafeFetching","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","type":"topic","url":"\/documentation\/safefetching","role":"collection"},"doc://SafeFetching/documentation/SafeFetching/FetchableMember":{"url":"\/documentation\/safefetching\/fetchablemember","navigatorTitle":[{"text":"FetchableMember","kind":"identifier"}],"abstract":[{"text":"Stores types and identifier of an entity and attribute or relationship that can be used for fetching.","type":"text"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","title":"FetchableMember","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FetchableMember","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://SafeFetching/documentation/SafeFetching/Fetchable/request()":{"type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable\/request()","kind":"symbol","title":"request()","abstract":[{"text":"Starts building a request.","type":"text"}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"request","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO","text":"Builders","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO10PreRequestV","text":"PreRequest","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:12SafeFetching12CreationStepO","text":"CreationStep","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/safefetching\/fetchable\/request()"},"doc://SafeFetching/documentation/SafeFetching/Fetchable":{"kind":"symbol","abstract":[{"type":"text","text":"Implemented by a "},{"type":"codeVoice","code":"NSManagedObject"},{"type":"text","text":" to offer fetching using SafeFetching API."}],"url":"\/documentation\/safefetching\/fetchable","navigatorTitle":[{"text":"Fetchable","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable","title":"Fetchable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Fetchable","kind":"identifier"}]},"doc://SafeFetching/documentation/SafeFetching/build-predicates":{"kind":"article","title":"Build Predicates","abstract":[{"type":"text","text":"Learn how to safely specify predicates when building a request."}],"type":"topic","role":"article","url":"\/documentation\/safefetching\/build-predicates","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates"}}}