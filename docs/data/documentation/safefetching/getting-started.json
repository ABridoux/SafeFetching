{"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/safefetching\/getting-started"]}],"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"This article uses the following managed object."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@objc(User)","final class User: NSManagedObject {","    @NSManaged var name: String","    @NSManaged var score: Int32","}"]},{"anchor":"Conform-to-Fetchable","text":"Conform to Fetchable","level":3,"type":"heading"},{"inlineContent":[{"text":"The first step to use SafeFetching with ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" is to make it conform to ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension User: Fetchable {","","    static var fetchableMembers: FetchableMembers { fetchableMembers }","","    struct FetchableMembers {","        let name = FetchableMember<User, String>(identifier: \"name\")","        let score = FetchableMember<User, Int32>(identifier: \"score\")","    }","}"]},{"inlineContent":[{"text":"It’s also possible to use the ","type":"text"},{"code":"FetchableManagedObject","type":"codeVoice"},{"text":" macro directly.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@FetchableManagedObject","@objc(User)","final class User: NSManagedObject {","    @NSManaged var name: String","    @NSManaged var score: Int32","}"]},{"content":[{"type":"paragraph","inlineContent":[{"text":"When using the macro, it’s possible to extend ","type":"text"},{"code":"User.FetchableMembers","type":"codeVoice"},{"text":" to add attributes or relationships that the macro cannot find in the declarations, such as when the property is defined in a parent class.","type":"text"}]}],"style":"tip","type":"aside","name":"Tip"},{"inlineContent":[{"type":"text","text":"To ignore an attribute or a relationship when using the "},{"type":"codeVoice","code":"FetchableManagedObject"},{"type":"text","text":" macro, annotate it with "},{"type":"codeVoice","code":"@FetchingIgnored"},{"type":"text","text":". This will effectively not generate a "},{"type":"codeVoice","code":"FetchableMember"},{"type":"text","text":" for the annotated property."}],"type":"paragraph"},{"anchor":"Fetch-User","text":"Fetch User","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Once "},{"type":"codeVoice","code":"User"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Fetchable"},{"type":"text","text":", it gains the static function "},{"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable\/request()","isActive":true},{"type":"text","text":" to start building a fetch request. It’s then possible to specify that all "},{"type":"codeVoice","code":"User"},{"type":"text","text":" entries should be fetched or just one, filter them using predicates and so on."}],"type":"paragraph"},{"inlineContent":[{"text":"For instance, here is a statement to fetch all users.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["try User.request().all().fetch(in: context) \/\/ [User]"]},{"inlineContent":[{"type":"text","text":"Where "},{"type":"codeVoice","code":"context"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"NSManagedObjectContext"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To filter the "},{"type":"codeVoice","code":"User"},{"type":"text","text":" with a predicate, add a "},{"type":"codeVoice","code":"where(_:)"},{"type":"text","text":" call after "},{"type":"codeVoice","code":"all()"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["try User.request()","    .all()","    .where { $0.name.hasPrefix(\"Anna\") }","    .fetch(in: context) \/\/ [User]"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"where(_:)"},{"type":"text","text":" expects a predicate built on the provided "},{"type":"codeVoice","code":"User.FetchableMembers"},{"type":"text","text":" that is then converted to a "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" with the appropriate format. The predicate is built using operators overloads or extensions on "},{"type":"codeVoice","code":"FetchableMember"},{"type":"text","text":". Write more complex predicates still feels natural."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["try User.request()","    .all()","    .where { $0.name.hasPrefix(\"Anna\") && $0.score < 10 }","    .fetch(in: context) \/\/ [User]"]},{"inlineContent":[{"text":"Finally, by importing ","type":"text"},{"code":"SafeFetching","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"text":", more convenience functions are available such as extensions on collections to make the predicates even closer to Swift syntax, while still generating the proper format for ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@_spi(SafeFetching) import SafeFetching","","let scores: [Int32] = [10, 20, 30]","try User.request()","    .all()","    .where { scores.contains($0.score) }","    .fetch(in: context) \/\/ [User]"]},{"anchor":"Whats-Next","text":"What’s Next","level":3,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Learn more about predicates by reading "},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Learn more about request building by reading ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-requests","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]}]}],"kind":"content"}],"abstract":[{"text":"Quick overview to start using SafeFetching and write fetch requests the easy way.","type":"text"}],"identifier":{"url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/getting-started","interfaceLanguage":"swift"},"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"Using SafeFetching: Getting Started","roleHeading":"Article","modules":[{"name":"SafeFetching"}],"role":"article"},"hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"references":{"doc://SafeFetching/documentation/SafeFetching/Fetchable":{"type":"topic","abstract":[{"text":"Implemented by a ","type":"text"},{"code":"NSManagedObject","type":"codeVoice"},{"text":" to offer fetching using SafeFetching API.","type":"text"}],"url":"\/documentation\/safefetching\/fetchable","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable","title":"Fetchable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Fetchable","kind":"identifier"}],"navigatorTitle":[{"text":"Fetchable","kind":"identifier"}],"kind":"symbol","role":"symbol"},"doc://SafeFetching/documentation/SafeFetching/build-requests":{"type":"topic","role":"article","abstract":[{"text":"Learn how to build requests with the SafeFetching DSL.","type":"text"}],"kind":"article","title":"Build Requests","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-requests","url":"\/documentation\/safefetching\/build-requests"},"doc://SafeFetching/documentation/SafeFetching/Fetchable/request()":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"request","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Builders","preciseIdentifier":"s:12SafeFetching8BuildersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"PreRequest","preciseIdentifier":"s:12SafeFetching8BuildersO10PreRequestV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"CreationStep","preciseIdentifier":"s:12SafeFetching12CreationStepO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Starts building a request.","type":"text"}],"title":"request()","type":"topic","kind":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Fetchable\/request()","url":"\/documentation\/safefetching\/fetchable\/request()","role":"symbol"},"doc://SafeFetching/documentation/SafeFetching":{"url":"\/documentation\/safefetching","abstract":[{"type":"text","text":"Convenience functions around "},{"type":"codeVoice","code":"CoreData"},{"type":"text","text":" fetching."}],"title":"SafeFetching","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","kind":"symbol","type":"topic","role":"collection"},"doc://SafeFetching/documentation/SafeFetching/build-predicates":{"kind":"article","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates","title":"Build Predicates","abstract":[{"text":"Learn how to specify safe predicates safely when building a request.","type":"text"}],"role":"article","url":"\/documentation\/safefetching\/build-predicates","type":"topic"}}}