{"kind":"article","sections":[],"metadata":{"roleHeading":"Article","role":"article","title":"Build Predicates","modules":[{"name":"SafeFetching"}]},"abstract":[{"text":"Learn how to specify safe predicates safely when building a request.","type":"text"}],"primaryContentSections":[{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Examples in the article refer to this entity.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@FetchableManagedObject","final class User: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var name: String? = \"\"","}"]},{"type":"paragraph","inlineContent":[{"text":"When building a request, the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","type":"reference"},{"text":" operation allows to specify a predicate. For a demonstration purpose in this article, predicates are specified after their implicit declaration, as shown below.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let predicate: Builders.Predicate<User> = .predicate { $0.name == \"Toto\" }"]},{"anchor":"Comparison","type":"heading","level":2,"text":"Comparison"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Comparison operators can be used with key paths to specify a property in the entity that should be compared to a test value."}]},{"anchor":"Equality","type":"heading","level":6,"text":"Equality"},{"syntax":"swift","type":"codeListing","code":["$0.name == \"Toto\""]},{"anchor":"Greater","type":"heading","level":6,"text":"Greater"},{"syntax":"swift","type":"codeListing","code":["$0.score > 20"]},{"anchor":"Greater-than","type":"heading","level":6,"text":"Greater than"},{"syntax":"swift","type":"codeListing","code":["$0.score >= 20"]},{"anchor":"Less","type":"heading","level":6,"text":"Less"},{"syntax":"swift","type":"codeListing","code":["$0.score < 20"]},{"anchor":"Less-than","type":"heading","level":6,"text":"Less than"},{"syntax":"swift","type":"codeListing","code":["$0.score <= 20"]},{"anchor":"Boolean","type":"heading","level":5,"text":"Boolean"},{"syntax":"swift","type":"codeListing","code":["$0.isAdmin"]},{"syntax":"swift","type":"codeListing","code":["$0.isAdmin == true"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inversion is supported."}]},{"syntax":"swift","type":"codeListing","code":["!$0.isAdmin"]},{"anchor":"Advanced-Operations","type":"heading","level":2,"text":"Advanced Operations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to use the advanced operators offered by "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" safely by calling the dedicated function from "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember"},{"type":"text","text":"."}]},{"anchor":"Has-Prefix-String-property","type":"heading","level":6,"text":"Has Prefix (String property)"},{"syntax":"swift","type":"codeListing","code":["$0.name.hasPrefix(\"Do\")"]},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions","type":"reference","isActive":true},{"text":" can be provided to the call.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["$0.name.hasPrefix(\"Do\", options: .caseInsensitive)"]},{"anchor":"Contains-String-property","type":"heading","level":6,"text":"Contains (String property)"},{"syntax":"swift","type":"codeListing","code":["$0.name.contains(\"Do\")"]},{"type":"paragraph","inlineContent":[{"text":"Other examples on a numeric property","type":"text"}]},{"anchor":"Is-In-Numeric-property","type":"heading","level":6,"text":"Is In (Numeric property)"},{"syntax":"swift","type":"codeListing","code":["$0.score.isIn(10...20)"]},{"type":"aside","style":"tip","name":"Tip","content":[{"inlineContent":[{"text":"By importing ","type":"text"},{"code":"SafeFetching","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"text":", more convenience functions are available such as extensions on collections to make the predicates even closer to Swift syntax, while still generating the proper format for ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"syntax":"swift","type":"codeListing","code":["(10...20).contains($0.score)"]},{"anchor":"Matches-a-Regular-Expression-String-property","type":"heading","level":6,"text":"Matches a Regular Expression (String property)"},{"syntax":"swift","type":"codeListing","code":["$0.name.matches(\"[A-Za-z]{3}\")"]},{"anchor":"Compound","type":"heading","level":2,"text":"Compound"},{"type":"paragraph","inlineContent":[{"text":"It’s possible to use the and ","type":"text"},{"type":"codeVoice","code":"&&"},{"text":" and or ","type":"text"},{"type":"codeVoice","code":"||"},{"text":" operators.","type":"text"}]},{"anchor":"And","type":"heading","level":5,"text":"And"},{"syntax":"swift","type":"codeListing","code":["$0.name == \"Bruce\"","    && $0.score.isIn(20..<40)"]},{"anchor":"Or","type":"heading","level":5,"text":"Or"},{"syntax":"swift","type":"codeListing","code":["$0.name == \"Bruce\"","    || $0.score.isIn(20..<40)"]},{"anchor":"Single-booleans","type":"heading","level":5,"text":"Single booleans"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Compound predicates work with single booleans."}]},{"syntax":"swift","type":"codeListing","code":["$0.isAdmin && $0.score.isIn(20..<40)"]},{"syntax":"swift","type":"codeListing","code":["!$0.isAdmin || $0.score.isIn(20..<40)"]},{"anchor":"And-And","type":"heading","level":3,"text":"And - And"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Composing predicates with compound predicates is done naturally"}]},{"syntax":"swift","type":"codeListing","code":["$0.score.isIn(20..<40)","    && $0.name.hasPrefix(\"Do\")","    && $0.name.hasSuffix(\"remi\")"]},{"anchor":"AndOr-precedence","type":"heading","level":3,"text":"And\/Or precedence"},{"type":"paragraph","inlineContent":[{"text":"Since ","type":"text"},{"code":"&&","type":"codeVoice"},{"text":" precedes ","type":"text"},{"code":"||","type":"codeVoice"},{"text":" in boolean expressions, it’s possible to enclose a predicate with brackets to prevent this behavior.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["$0.score.isIn(20..<40)","    && ($0.name.hasPrefix(\"Do\") || $0.name.hasSuffix(\"remi\"))"]},{"anchor":"RawRepresentable","type":"heading","level":2,"text":"RawRepresentable"},{"type":"paragraph","inlineContent":[{"code":"RawRepresentable","type":"codeVoice"},{"text":" types can be used in the predicate when they conform to ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","type":"reference","isActive":true},{"text":" (and thus can be stored as their raw value in the CoreData store).","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance with the "},{"type":"codeVoice","code":"Colors"},{"type":"text","text":" enum:"}]},{"syntax":"swift","type":"codeListing","code":["struct Colors: String, DatabaseValue, DatabaseTestValue {","    case red","    case blue","    case green","}"]},{"type":"paragraph","inlineContent":[{"text":"Here are some possible predicates.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["{ members in members.color == .red }","{ members in members.color == color.isIn(.red, .blue) }"]},{"anchor":"Comparison-predicates","type":"heading","level":3,"text":"Comparison predicates"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same comparison predicates are available:"}]},{"syntax":"swift","type":"codeListing","code":["$0.color == .red"]},{"syntax":"swift","type":"codeListing","code":["$0.color != .red"]},{"anchor":"Advanced-predicates","type":"heading","level":3,"text":"Advanced predicates"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"isIn","type":"codeVoice"},{"text":" operator is also available to check that a collection contains an attribute.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["$0.color.isIn(.red, .blue)"]},{"syntax":"swift","type":"codeListing","code":["$0.color.isNotIn([.red, .blue])"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s also possible to use the "},{"code":"contains","type":"codeVoice"},{"type":"text","text":" function on the collection."}]},{"syntax":"swift","type":"codeListing","code":["[.red, .blue].contains($0.color)"]},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"To use functions declared in Swift protocols, such as "},{"type":"codeVoice","code":"Collection.contains(_:)"},{"type":"text","text":", or "},{"type":"codeVoice","code":"OptionSet.intersects(_:)"},{"type":"text","text":", import SafeFetching with "},{"type":"codeVoice","code":"@_spi(SafeFetching)"},{"type":"text","text":". This is to avoid cluttering"},{"type":"text","text":" "},{"type":"text","text":"other modules."}],"type":"paragraph"}]},{"anchor":"OptionSet","type":"heading","level":3,"text":"OptionSet"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With an "},{"type":"codeVoice","code":"OptionSet"},{"type":"text","text":", it’s advised to rather use the "},{"type":"codeVoice","code":"intersects"},{"type":"text","text":" predicates."},{"type":"text","text":" "},{"type":"text","text":"For instance with the "},{"type":"codeVoice","code":"Colors"},{"type":"text","text":" option set:"}]},{"syntax":"swift","type":"codeListing","code":["struct Colors: OptionSet, DatabaseValue, DatabaseTestValue {","    let rawValue: Int","","    static let red = StubOptionSet(rawValue: 1 << 0)","    static let blue = StubOptionSet(rawValue: 1 << 1)","    static let green = StubOptionSet(rawValue: 1 << 2)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The predicate is specified as follow:"}]},{"type":"codeListing","syntax":"swift","code":["$0.color.intersects([.red, .blue])"]},{"type":"codeListing","syntax":"swift","code":["[.red, .blue].intersects($0.color)"]},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"$0.color.intersects(.blue)","type":"codeVoice"},{"text":" is only the same as ","type":"text"},{"code":"$0.color == .blue","type":"codeVoice"},{"text":" when the stored ","type":"text"},{"code":"color","type":"codeVoice"},{"text":" is a single option.","type":"text"}]}]},{"text":"Relationships","level":2,"type":"heading","anchor":"Relationships"},{"type":"paragraph","inlineContent":[{"text":"Predicates in SafeFetching support relationships. Given the two entities:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@FetchableManagedObject","final class User: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var pet: Pet?","}","","@FetchableManagedObject","final class Pet: NSManagedObject {","    @NSManaged var name: String ","}"]},{"type":"paragraph","inlineContent":[{"text":"The following predicate can be expressed for the ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" entity.","type":"text"}]},{"code":["$0.pet.name == \"Minouche\""],"type":"codeListing","syntax":"swift"},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even if "},{"type":"codeVoice","code":"pet"},{"type":"text","text":" is an optional "},{"type":"codeVoice","code":"Pet"},{"type":"text","text":" relationship, SafeFetching has no concerns about it when specifying comparison. Optionals are not relevant when writing a "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" string format to fetch a CoreData store (unless of course when checking nullity)."}]}]},{"level":3,"text":"NSManagedObject","anchor":"NSManagedObject","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Testing a relationship against another entity is supported (it then uses the ","type":"text"},{"code":"objectID","type":"codeVoice"},{"text":").","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ otherPet: Pet","$0.pet == otherPet"]},{"anchor":"NSManagedObject-Comparisons","type":"heading","text":"NSManagedObject Comparisons","level":2},{"type":"paragraph","inlineContent":[{"text":"Comparison of self is supported (it then uses the ","type":"text"},{"type":"codeVoice","code":"objectID"},{"text":").","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ someUser: User","$0 == someUser"]},{"anchor":"Standalone-predicate","type":"heading","text":"Standalone predicate","level":2},{"type":"paragraph","inlineContent":[{"text":"Using a ","type":"text"},{"code":"where(_:)","type":"codeVoice"},{"text":" function is not the only way to make predicate.","type":"text"}]},{"anchor":"NSPredicate-convenience","type":"heading","text":"NSPredicate convenience","level":3},{"type":"paragraph","inlineContent":[{"text":"If needed, a predicate can be specified to make a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let predicate: NSPredicate = .safe(on: User.self) { $0.score > 10 }"]},{"anchor":"Static","type":"heading","text":"Static","level":3},{"type":"paragraph","inlineContent":[{"text":"Also, a predicate can be provided with ","type":"text"},{"type":"codeVoice","code":"Builders\/Predicate\/predicate(_:)"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let predicate: Builders.Predicate<User> = .predicate { $0.score > 10 }"]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/safefetching\/build-predicates"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates"},"hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate"],"anchor":"Build-Predicates","title":"Build Predicates"}],"references":{"doc://SafeFetching/documentation/SafeFetching/Builders/StringComparisonOptions":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringComparisonOptions","kind":"identifier"}],"abstract":[{"text":"Available options to compare strings","type":"text"}],"navigatorTitle":[{"text":"StringComparisonOptions","kind":"identifier"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions","url":"\/documentation\/safefetching\/builders\/stringcomparisonoptions","role":"symbol","kind":"symbol","type":"topic","title":"Builders.StringComparisonOptions"},"doc://SafeFetching/documentation/SafeFetching":{"kind":"symbol","type":"topic","title":"SafeFetching","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","abstract":[{"type":"text","text":"Convenience functions around "},{"type":"codeVoice","code":"CoreData"},{"type":"text","text":" fetching."}],"url":"\/documentation\/safefetching","role":"collection"},"doc://SafeFetching/documentation/SafeFetching/Builders/Request/where(_:)-5uzqj":{"conformance":{"constraints":[{"type":"codeVoice","code":"Entity"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Fetchable"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Step"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"TargetStep"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"FetchResult"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"kind":"symbol","url":"\/documentation\/safefetching\/builders\/request\/where(_:)-5uzqj","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","type":"topic","role":"symbol","title":"where(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`where`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"FetchableMembers","preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Builders","preciseIdentifier":"s:12SafeFetching8BuildersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Predicate","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Builders","preciseIdentifier":"s:12SafeFetching8BuildersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Request","preciseIdentifier":"s:12SafeFetching8BuildersO7RequestV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"PredicateStep","preciseIdentifier":"s:12SafeFetching13PredicateStepO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Adds a predicate to the request.","type":"text"}]},"doc://SafeFetching/documentation/SafeFetching/DatabaseValue":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseValue","kind":"identifier"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","role":"symbol","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A type that can be used for an attribute in a predicate when fetching a CoreData store."}],"navigatorTitle":[{"text":"DatabaseValue","kind":"identifier"}],"title":"DatabaseValue","url":"\/documentation\/safefetching\/databasevalue"},"doc://SafeFetching/documentation/SafeFetching/DatabaseValueIdentification":{"type":"topic","kind":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","abstract":[{"type":"text","text":"Stub type with internal init to ensure no conformance to "},{"isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","type":"reference"},{"type":"text","text":" can be added outside of the package."}],"url":"\/documentation\/safefetching\/databasevalueidentification","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseValueIdentification"}],"navigatorTitle":[{"kind":"identifier","text":"DatabaseValueIdentification"}],"title":"DatabaseValueIdentification"},"doc://SafeFetching/documentation/SafeFetching/Builders/CompoundPredicate":{"title":"Builders.CompoundPredicate","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate","url":"\/documentation\/safefetching\/builders\/compoundpredicate","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CompoundPredicate","kind":"identifier"}],"type":"topic","abstract":[{"text":"Predicate with ","type":"text"},{"code":"&&","type":"codeVoice"},{"text":" (AND) or ","type":"text"},{"code":"||","type":"codeVoice"},{"text":" (OR) operator to evaluate two predicates.","type":"text"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"CompoundPredicate","kind":"identifier"}]},"doc://SafeFetching/documentation/SafeFetching/DatabaseTestValue":{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"DatabaseTestValue"}],"type":"topic","title":"DatabaseTestValue","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DatabaseTestValue"}],"role":"symbol","url":"\/documentation\/safefetching\/databasetestvalue","abstract":[{"text":"A type that can be used in a predicate as a test value.","type":"text"}]},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate":{"kind":"symbol","abstract":[{"type":"text","text":"Generated from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember"},{"type":"text","text":" operations to wrap a "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Predicate"}],"title":"Builders.Predicate","url":"\/documentation\/safefetching\/builders\/predicate","navigatorTitle":[{"kind":"identifier","text":"Predicate"}],"role":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","type":"topic"},"doc://SafeFetching/documentation/SafeFetching/FetchableMember":{"title":"FetchableMember","url":"\/documentation\/safefetching\/fetchablemember","role":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","abstract":[{"text":"Stores types and identifier of an entity and attribute or relationship that can be used for fetching.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FetchableMember","kind":"identifier"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"FetchableMember","kind":"identifier"}]}}}