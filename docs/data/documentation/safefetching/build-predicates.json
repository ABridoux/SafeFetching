{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Examples in the article refer to this entity.","type":"text"}]},{"type":"codeListing","code":["@FetchableManagedObject","final class StubEntity: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var name: String? = \"\"","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"When building a request, the ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","isActive":true,"type":"reference"},{"text":" operation allows to specify a predicate. For a demonstration purpose in this article, predicates are specified after their implicit declaration.","type":"text"}]},{"type":"codeListing","code":["let predicate: Builders.Predicate<StubEntity>","$0.name == \"Toto\""],"syntax":"swift"},{"type":"heading","text":"Comparison","level":2,"anchor":"Comparison"},{"type":"paragraph","inlineContent":[{"text":"Comparison operators can be used with key paths to specify a property in the entity that should be compared to a test value.","type":"text"}]},{"type":"heading","text":"Equality","level":6,"anchor":"Equality"},{"type":"codeListing","code":["$0.name == \"Toto\""],"syntax":"swift"},{"type":"heading","text":"Greater","level":6,"anchor":"Greater"},{"type":"codeListing","code":["$0.score > 20"],"syntax":"swift"},{"type":"heading","text":"Greater than","level":6,"anchor":"Greater-than"},{"type":"codeListing","code":["$0.score >= 20"],"syntax":"swift"},{"type":"heading","text":"Less","level":6,"anchor":"Less"},{"type":"codeListing","code":["$0.score < 20"],"syntax":"swift"},{"type":"heading","text":"Less than","level":6,"anchor":"Less-than"},{"syntax":"swift","code":["$0.score <= 20"],"type":"codeListing"},{"level":5,"text":"Boolean","type":"heading","anchor":"Boolean"},{"syntax":"swift","code":["$0.isAdmin"],"type":"codeListing"},{"syntax":"swift","code":["$0.isAdmin == true"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inversion is supported."}]},{"syntax":"swift","code":["!$0.isAdmin"],"type":"codeListing"},{"level":2,"text":"Advanced Operations","type":"heading","anchor":"Advanced-Operations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to use the advanced operators offered by "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" safely by specifying calling the dedicated function from the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember"},{"type":"text","text":"."}]},{"level":6,"text":"Has Prefix (String property)","type":"heading","anchor":"Has-Prefix-String-property"},{"syntax":"swift","code":["$0.name.hasPrefix(\"Do\")"],"type":"codeListing"},{"level":6,"text":"Contains (String property)","type":"heading","anchor":"Contains-String-property"},{"syntax":"swift","code":["$0.name.contains(\"Do\")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other examples on a numeric property"}]},{"level":6,"text":"Is In (Numeric property)","type":"heading","anchor":"Is-In-Numeric-property"},{"syntax":"swift","code":["$0.score.isIn(10...20)"],"type":"codeListing"},{"level":6,"text":"Matches a Regular Expression (string property)","type":"heading","anchor":"Matches-a-Regular-Expression-string-property"},{"syntax":"swift","code":["$0.name.matches(\"[A-Za-z]{3}\")"],"type":"codeListing"},{"level":2,"text":"Compound","type":"heading","anchor":"Compound"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to use the and "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" and or "},{"type":"codeVoice","code":"||"},{"type":"text","text":" operators."}]},{"level":5,"text":"And","type":"heading","anchor":"And"},{"syntax":"swift","code":["$0.name == \"Bruce\"","    && $0.score.isIn(20..<40)"],"type":"codeListing"},{"level":5,"text":"Or","type":"heading","anchor":"Or"},{"syntax":"swift","code":["$0.name == \"Bruce\"","    || $0.score.isIn(20..<40)"],"type":"codeListing"},{"level":5,"text":"Single booleans","type":"heading","anchor":"Single-booleans"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Compound predicates work with single booleans."}]},{"syntax":"swift","code":["$0.isAdmin && $0.score.isIn(20..<40)"],"type":"codeListing"},{"syntax":"swift","code":["!$0.isAdmin || $0.score.isIn(20..<40)"],"type":"codeListing"},{"level":3,"text":"And - And","type":"heading","anchor":"And-And"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Composing predicates with compound predicates is done naturally"}]},{"syntax":"swift","code":["$0.score.isIn(20..<40)","    && $0.name.hasPrefix(\"Do\")","    && $0.name.hasSuffix(\"remi\")"],"type":"codeListing"},{"level":3,"text":"And\/Or precedence","type":"heading","anchor":"AndOr-precedence"},{"type":"paragraph","inlineContent":[{"text":"Since ","type":"text"},{"code":"&&","type":"codeVoice"},{"text":" precedes ","type":"text"},{"code":"||","type":"codeVoice"},{"text":" in boolean expressions, it’s possible to enclose a predicate with brackets to prevent this behavior.","type":"text"}]},{"syntax":"swift","code":["$0.score.isIn(20..<40)","    && ($0.name.hasPrefix(\"Do\") || $0.name.hasSuffix(\"remi\"))"],"type":"codeListing"},{"level":2,"text":"RawRepresentable","type":"heading","anchor":"RawRepresentable"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"RawRepresentable"},{"type":"text","text":" types can be used in the predicate when they conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue"},{"type":"text","text":" (and thus can be stored as their raw value in the CoreData store)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance with the "},{"type":"codeVoice","code":"Colors"},{"type":"text","text":" enum:"}]},{"syntax":"swift","code":["struct Colors: String {","    case red","    case blue","    case green","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Here are some possible predicates.","type":"text"}]},{"syntax":"swift","code":["{ members in members.color == .red }","{ members in members.color == color.isIn(.red, .blue) }"],"type":"codeListing"},{"level":3,"text":"Comparison predicates","type":"heading","anchor":"Comparison-predicates"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same comparison predicates are available:"}]},{"syntax":"swift","code":["$0.color == .red"],"type":"codeListing"},{"syntax":"swift","code":["$0.color != .red"],"type":"codeListing"},{"level":3,"text":"Advanced predicates","type":"heading","anchor":"Advanced-predicates"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"isIn","type":"codeVoice"},{"type":"text","text":" operator is also available to check that a collection contains an attribute."}]},{"syntax":"swift","code":["$0.color.isIn(.red, .blue)"],"type":"codeListing"},{"syntax":"swift","code":["$0.color.isNotIn([.red, .blue])"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s also possible to use the "},{"type":"codeVoice","code":"contains"},{"type":"text","text":" function on the collection."}]},{"syntax":"swift","code":["[.red, .blue].contains($0.color)"],"type":"codeListing"},{"name":"Note","style":"note","content":[{"inlineContent":[{"text":"To use functions declared in Swift protocols, such as ","type":"text"},{"code":"Collection.contains(_:)","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"OptionSet.intersects(_:)","type":"codeVoice"},{"text":", import SafeFetching with ","type":"text"},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"text":". This is to avoid cluttering","type":"text"},{"text":" ","type":"text"},{"text":"other modules.","type":"text"}],"type":"paragraph"}],"type":"aside"},{"level":3,"text":"OptionSet","type":"heading","anchor":"OptionSet"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With an option set, it’s advised to rather use the "},{"type":"codeVoice","code":"intersects"},{"type":"text","text":" predicates."},{"type":"text","text":" "},{"type":"text","text":"For instance with the "},{"type":"codeVoice","code":"Colors"},{"type":"text","text":" option set:"}]},{"syntax":"swift","code":["struct Colors: OptionSet {","    let rawValue: Int","","    static let red = StubOptionSet(rawValue: 1 << 0)","    static let blue = StubOptionSet(rawValue: 1 << 1)","    static let green = StubOptionSet(rawValue: 1 << 2)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The predicate is specified as follow:","type":"text"}]},{"syntax":"swift","code":["$0.color.intersects([.red, .blue])"],"type":"codeListing"},{"syntax":"swift","code":["[.red, .blue].intersects($0.color)"],"type":"codeListing"},{"level":3,"text":"Comparing Option Set Values","type":"heading","anchor":"Comparing-Option-Set-Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Do note that"}]},{"syntax":"swift","code":["$0.color.intersects(.blue)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"is only the same as","type":"text"}]},{"syntax":"swift","code":["$0.color == .blue"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"when the stored ","type":"text"},{"code":"color","type":"codeVoice"},{"text":" is a single option","type":"text"}],"type":"emphasis"},{"text":".","type":"text"}]},{"level":2,"text":"Relationships","type":"heading","anchor":"Relationships"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Predicates in SafeFetching support relationships. Given the two entities:"}]},{"syntax":"swift","code":["@FetchableManagedObject","final class StubEntity: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var pet: Pet?","}","","@FetchableManagedObject","final class Pet: NSManagedObject {","    @NSManaged var name: String ","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The following predicate can be expressed for the ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" entity.","type":"text"}]},{"syntax":"swift","code":["$0.pet.name == \"Minouche\""],"type":"codeListing"},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even if "},{"type":"codeVoice","code":"pet"},{"type":"text","text":" is an optional "},{"type":"codeVoice","code":"Pet"},{"type":"text","text":" relationship, SafeFetching has no concerns about it when specifying comparison. Optionals are not relevant when writing a "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" string format to fetch a CoreData store (unless of course when checking nullity)."}]}],"type":"aside"},{"level":2,"text":"Standalone predicate","type":"heading","anchor":"Standalone-predicate"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using a "},{"type":"codeVoice","code":"where(_:)"},{"type":"text","text":" function is not the only way to make predicate."}]},{"level":3,"text":"NSPredicate convenience","type":"heading","anchor":"NSPredicate-convenience"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed, a predicate can be specified to make a "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","code":["let predicate: NSPredicate = .safe(on: User.self) { $0.score > 10 }"],"type":"codeListing"},{"level":3,"text":"Static","type":"heading","anchor":"Static"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Also, a predicate can be provided with "},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate\/predicate(_:)","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"syntax":"swift","code":["let predicate: Builders.Predicate<User> = .predicate { $0.score > 10 }"],"type":"codeListing"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"modules":[{"name":"SafeFetching"}],"role":"article","roleHeading":"Article","title":"Build Predicates"},"variants":[{"paths":["\/documentation\/safefetching\/build-predicates"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","sections":[],"seeAlsoSections":[{"anchor":"Build-Predicates","title":"Build Predicates","identifiers":["doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate"],"generated":true}],"abstract":[{"text":"Learn how to specify safe predicates safely when building a request.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"references":{"doc://SafeFetching/documentation/SafeFetching/DatabaseTestValue":{"abstract":[{"type":"text","text":"A type that can be used in a predicate as a test value."}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","title":"DatabaseTestValue","url":"\/documentation\/safefetching\/databasetestvalue","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"DatabaseTestValue","kind":"identifier"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseTestValue","kind":"identifier"}]},"doc://SafeFetching/documentation/SafeFetching/Builders/Request/where(_:)-5uzqj":{"kind":"symbol","type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","url":"\/documentation\/safefetching\/builders\/request\/where(_:)-5uzqj","title":"where(_:)","conformance":{"constraints":[{"type":"codeVoice","code":"Entity"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Fetchable"},{"type":"text","text":", "},{"type":"codeVoice","code":"Step"},{"type":"text","text":" is "},{"type":"codeVoice","code":"TargetStep"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"FetchResult"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","abstract":[{"type":"text","text":"Adds a predicate to the request."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`where`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa","text":"FetchableMembers","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO","text":"Builders","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC","text":"Predicate","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO","text":"Builders","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO7RequestV","text":"Request","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:12SafeFetching13PredicateStepO","text":"PredicateStep","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate":{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Predicate","kind":"identifier"}],"navigatorTitle":[{"text":"Predicate","kind":"identifier"}],"title":"Builders.Predicate","kind":"symbol","role":"symbol","abstract":[],"url":"\/documentation\/safefetching\/builders\/predicate"},"doc://SafeFetching/documentation/SafeFetching/DatabaseValueIdentification":{"type":"topic","kind":"symbol","title":"DatabaseValueIdentification","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseValueIdentification","kind":"identifier"}],"abstract":[{"type":"text","text":"Stub type with internal init to ensure no conformance to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue"},{"type":"text","text":" can be added outside of the package."}],"navigatorTitle":[{"text":"DatabaseValueIdentification","kind":"identifier"}],"url":"\/documentation\/safefetching\/databasevalueidentification","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","role":"symbol"},"doc://SafeFetching/documentation/SafeFetching":{"abstract":[{"type":"text","text":"Convenience functions around "},{"type":"codeVoice","code":"CoreData"},{"type":"text","text":" fetching."}],"type":"topic","kind":"symbol","url":"\/documentation\/safefetching","role":"collection","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","title":"SafeFetching"},"doc://SafeFetching/documentation/SafeFetching/FetchableMember":{"type":"topic","abstract":[{"text":"Stores types and identifier of an entity and attribute or relationship that can be used for fetching.","type":"text"}],"url":"\/documentation\/safefetching\/fetchablemember","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","navigatorTitle":[{"text":"FetchableMember","kind":"identifier"}],"role":"symbol","title":"FetchableMember","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FetchableMember","kind":"identifier"}],"kind":"symbol"},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate/predicate(_:)":{"kind":"symbol","role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"predicate"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Entity"},{"kind":"text","text":"."},{"preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa","kind":"typeIdentifier","text":"FetchableMembers"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO","text":"Builders","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC","text":"Predicate","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO","text":"Builders","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC","text":"Predicate","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Entity"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Fetchable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"type":"topic","url":"\/documentation\/safefetching\/builders\/predicate\/predicate(_:)","title":"predicate(_:)","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate\/predicate(_:)"},"doc://SafeFetching/documentation/SafeFetching/DatabaseValue":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseValue","kind":"identifier"}],"url":"\/documentation\/safefetching\/databasevalue","navigatorTitle":[{"text":"DatabaseValue","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","title":"DatabaseValue","type":"topic","kind":"symbol","abstract":[{"text":"A type that can be used for an attribute in a predicate when fetching a CoreData store.","type":"text"}]},"doc://SafeFetching/documentation/SafeFetching/Builders/CompoundPredicate":{"navigatorTitle":[{"kind":"identifier","text":"CompoundPredicate"}],"kind":"symbol","url":"\/documentation\/safefetching\/builders\/compoundpredicate","abstract":[{"text":"Predicate with ","type":"text"},{"code":"&&","type":"codeVoice"},{"text":" (AND) or ","type":"text"},{"code":"||","type":"codeVoice"},{"text":" (OR) operator to evaluate two predicates.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompoundPredicate"}],"type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate","title":"Builders.CompoundPredicate"}}}