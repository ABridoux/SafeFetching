{"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"primaryContentSections":[{"content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Examples in the article refer to this entity."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@FetchableManagedObject","final class User: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var name: String? = \"\"","}"]},{"inlineContent":[{"text":"When building a request, the ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","type":"reference","isActive":true},{"text":" operation allows to specify a predicate. For a demonstration purpose in this article, predicates are specified after their implicit declaration, as shown below.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let predicate: Builders.Predicate<User> = .predicate { $0.name == \"Toto\" }"]},{"text":"Comparison","anchor":"Comparison","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Comparison operators can be used with key paths to specify a property in the entity that should be compared to a test value."}],"type":"paragraph"},{"text":"Equality","anchor":"Equality","type":"heading","level":6},{"syntax":"swift","type":"codeListing","code":["$0.name == \"Toto\""]},{"text":"Greater","anchor":"Greater","type":"heading","level":6},{"syntax":"swift","type":"codeListing","code":["$0.score > 20"]},{"anchor":"Greater-than","type":"heading","text":"Greater than","level":6},{"code":["$0.score >= 20"],"type":"codeListing","syntax":"swift"},{"anchor":"Less","type":"heading","text":"Less","level":6},{"code":["$0.score < 20"],"type":"codeListing","syntax":"swift"},{"anchor":"Less-than","type":"heading","text":"Less than","level":6},{"code":["$0.score <= 20"],"type":"codeListing","syntax":"swift"},{"anchor":"Boolean","type":"heading","text":"Boolean","level":5},{"code":["$0.isAdmin"],"type":"codeListing","syntax":"swift"},{"code":["$0.isAdmin == true"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inversion is supported."}]},{"type":"codeListing","syntax":"swift","code":["!$0.isAdmin"]},{"anchor":"Advanced-Operations","type":"heading","text":"Advanced Operations","level":2},{"inlineContent":[{"type":"text","text":"It’s possible to use the advanced operators offered by "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" safely by calling the dedicated function from "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Has-Prefix-String-property","type":"heading","text":"Has Prefix (String property)","level":6},{"type":"codeListing","syntax":"swift","code":["$0.name.hasPrefix(\"Do\")"]},{"inlineContent":[{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions","type":"reference","isActive":true},{"type":"text","text":" can be provided to the call."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["$0.name.hasPrefix(\"Do\", options: .caseInsensitive)"]},{"anchor":"Contains-String-property","type":"heading","text":"Contains (String property)","level":6},{"type":"codeListing","syntax":"swift","code":["$0.name.contains(\"Do\")"]},{"inlineContent":[{"text":"Other examples on a numeric property","type":"text"}],"type":"paragraph"},{"anchor":"Is-In-Numeric-property","type":"heading","text":"Is In (Numeric property)","level":6},{"type":"codeListing","syntax":"swift","code":["$0.score.isIn(10...20)"]},{"name":"Tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"By importing "},{"code":"SafeFetching","type":"codeVoice"},{"type":"text","text":" with "},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"type":"text","text":", more convenience functions are available such as extensions on collections to make the predicates even closer to Swift syntax, while still generating the proper format for "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"aside","style":"tip"},{"type":"codeListing","syntax":"swift","code":["(10...20).contains($0.score)"]},{"anchor":"Matches-a-Regular-Expression-String-property","type":"heading","text":"Matches a Regular Expression (String property)","level":6},{"type":"codeListing","syntax":"swift","code":["$0.name.matches(\"[A-Za-z]{3}\")"]},{"anchor":"Compound","type":"heading","text":"Compound","level":2},{"inlineContent":[{"text":"It’s possible to use the and ","type":"text"},{"type":"codeVoice","code":"&&"},{"text":" and or ","type":"text"},{"type":"codeVoice","code":"||"},{"text":" operators.","type":"text"}],"type":"paragraph"},{"anchor":"And","level":5,"text":"And","type":"heading"},{"code":["$0.name == \"Bruce\"","    && $0.score.isIn(20..<40)"],"syntax":"swift","type":"codeListing"},{"anchor":"Or","level":5,"text":"Or","type":"heading"},{"code":["$0.name == \"Bruce\"","    || $0.score.isIn(20..<40)"],"syntax":"swift","type":"codeListing"},{"anchor":"Single-booleans","level":5,"text":"Single booleans","type":"heading"},{"inlineContent":[{"type":"text","text":"Compound predicates work with single booleans."}],"type":"paragraph"},{"code":["$0.isAdmin && $0.score.isIn(20..<40)"],"syntax":"swift","type":"codeListing"},{"code":["!$0.isAdmin || $0.score.isIn(20..<40)"],"syntax":"swift","type":"codeListing"},{"anchor":"And-And","level":3,"text":"And - And","type":"heading"},{"inlineContent":[{"type":"text","text":"Composing predicates with compound predicates is done naturally"}],"type":"paragraph"},{"code":["$0.score.isIn(20..<40)","    && $0.name.hasPrefix(\"Do\")","    && $0.name.hasSuffix(\"remi\")"],"syntax":"swift","type":"codeListing"},{"anchor":"AndOr-precedence","level":3,"text":"And\/Or precedence","type":"heading"},{"inlineContent":[{"text":"Since ","type":"text"},{"code":"&&","type":"codeVoice"},{"text":" precedes ","type":"text"},{"code":"||","type":"codeVoice"},{"text":" in boolean expressions, it’s possible to enclose a predicate with brackets to prevent this behavior.","type":"text"}],"type":"paragraph"},{"code":["$0.score.isIn(20..<40)","    && ($0.name.hasPrefix(\"Do\") || $0.name.hasSuffix(\"remi\"))"],"syntax":"swift","type":"codeListing"},{"anchor":"RawRepresentable","level":2,"text":"RawRepresentable","type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"RawRepresentable"},{"type":"text","text":" types can be used in the predicate when they conform to "},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","type":"reference","isActive":true},{"type":"text","text":" (and thus can be stored as their raw value in the CoreData store)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For instance with the "},{"type":"codeVoice","code":"Colors"},{"type":"text","text":" enum:"}],"type":"paragraph"},{"code":["struct Colors: String, DatabaseValue, DatabaseTestValue {","    case red","    case blue","    case green","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Here are some possible predicates."}],"type":"paragraph"},{"code":["{ members in members.color == .red }","{ members in members.color == color.isIn(.red, .blue) }"],"syntax":"swift","type":"codeListing"},{"anchor":"Comparison-predicates","level":3,"text":"Comparison predicates","type":"heading"},{"inlineContent":[{"text":"The same comparison predicates are available:","type":"text"}],"type":"paragraph"},{"code":["$0.color == .red"],"syntax":"swift","type":"codeListing"},{"code":["$0.color != .red"],"syntax":"swift","type":"codeListing"},{"anchor":"Advanced-predicates","level":3,"text":"Advanced predicates","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"isIn"},{"text":" operator is also available to check that a collection contains an attribute.","type":"text"}],"type":"paragraph"},{"code":["$0.color.isIn(.red, .blue)"],"syntax":"swift","type":"codeListing"},{"code":["$0.color.isNotIn([.red, .blue])"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"It’s also possible to use the ","type":"text"},{"type":"codeVoice","code":"contains"},{"text":" function on the collection.","type":"text"}]},{"syntax":"swift","code":["[.red, .blue].contains($0.color)"],"type":"codeListing"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To use functions declared in Swift protocols, such as "},{"code":"Collection.contains(_:)","type":"codeVoice"},{"type":"text","text":", or "},{"code":"OptionSet.intersects(_:)","type":"codeVoice"},{"type":"text","text":", import SafeFetching with "},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"type":"text","text":". This is to avoid cluttering"},{"type":"text","text":" "},{"type":"text","text":"other modules."}]}]},{"anchor":"OptionSet","type":"heading","text":"OptionSet","level":3},{"type":"paragraph","inlineContent":[{"text":"With an ","type":"text"},{"type":"codeVoice","code":"OptionSet"},{"text":", it’s advised to rather use the ","type":"text"},{"type":"codeVoice","code":"intersects"},{"text":" predicates.","type":"text"},{"text":" ","type":"text"},{"text":"For instance with the ","type":"text"},{"type":"codeVoice","code":"Colors"},{"text":" option set:","type":"text"}]},{"syntax":"swift","code":["struct Colors: OptionSet, DatabaseValue, DatabaseTestValue {","    let rawValue: Int","","    static let red = StubOptionSet(rawValue: 1 << 0)","    static let blue = StubOptionSet(rawValue: 1 << 1)","    static let green = StubOptionSet(rawValue: 1 << 2)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The predicate is specified as follow:","type":"text"}]},{"syntax":"swift","code":["$0.color.intersects([.red, .blue])"],"type":"codeListing"},{"syntax":"swift","code":["[.red, .blue].intersects($0.color)"],"type":"codeListing"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"$0.color.intersects(.blue)"},{"type":"text","text":" is only the same as "},{"type":"codeVoice","code":"$0.color == .blue"},{"type":"text","text":" when the stored "},{"type":"codeVoice","code":"color"},{"type":"text","text":" is a single option."}]}]},{"anchor":"Relationships","type":"heading","text":"Relationships","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Predicates in SafeFetching support relationships. Given the two entities:"}]},{"syntax":"swift","code":["@FetchableManagedObject","final class User: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var pet: Pet?","}","","@FetchableManagedObject","final class Pet: NSManagedObject {","    @NSManaged var name: String ","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The following predicate can be expressed for the ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" entity.","type":"text"}]},{"syntax":"swift","code":["$0.pet.name == \"Minouche\""],"type":"codeListing"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Even if ","type":"text"},{"code":"pet","type":"codeVoice"},{"text":" is an optional ","type":"text"},{"code":"Pet","type":"codeVoice"},{"text":" relationship, SafeFetching has no concerns about it when specifying comparison. Optionals are not relevant when writing a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" string format to fetch a CoreData store (unless of course when checking nullity).","type":"text"}]}]},{"anchor":"NSManagedObject","type":"heading","text":"NSManagedObject","level":3},{"type":"paragraph","inlineContent":[{"text":"Testing a relationship against another entity is supported (it then uses the ","type":"text"},{"type":"codeVoice","code":"objectID"},{"text":").","type":"text"}]},{"syntax":"swift","code":["\/\/ otherPet: Pet","$0.pet == otherPet"],"type":"codeListing"},{"text":"NSManagedObject Comparisons","anchor":"NSManagedObject-Comparisons","type":"heading","level":2},{"inlineContent":[{"text":"Comparison of self is supported (it then uses the ","type":"text"},{"code":"objectID","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"code":["\/\/ someUser: User","$0 == someUser"],"type":"codeListing","syntax":"swift"},{"text":"Standalone predicate","anchor":"Standalone-predicate","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Using a "},{"code":"where(_:)","type":"codeVoice"},{"type":"text","text":" function is not the only way to make predicate."}],"type":"paragraph"},{"text":"NSPredicate convenience","anchor":"NSPredicate-convenience","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"If needed, a predicate can be specified to make a "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let predicate: NSPredicate = .safe(on: User.self) { $0.score > 10 }"],"type":"codeListing","syntax":"swift"},{"text":"Static","anchor":"Static","type":"heading","level":3},{"inlineContent":[{"text":"Also, a predicate can be provided with ","type":"text"},{"type":"codeVoice","code":"Builders\/Predicate\/predicate(_:)"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["let predicate: Builders.Predicate<User> = .predicate { $0.score > 10 }"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"metadata":{"title":"Build Predicates","roleHeading":"Article","modules":[{"name":"SafeFetching"}],"role":"article"},"sections":[],"kind":"article","abstract":[{"text":"Learn how to specify safe predicates safely when building a request.","type":"text"}],"seeAlsoSections":[{"title":"Build Predicates","generated":true,"anchor":"Build-Predicates","identifiers":["doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate"]}],"variants":[{"paths":["\/documentation\/safefetching\/build-predicates"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SafeFetching/documentation/SafeFetching/Builders/StringComparisonOptions":{"title":"Builders.StringComparisonOptions","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions","navigatorTitle":[{"kind":"identifier","text":"StringComparisonOptions"}],"url":"\/documentation\/safefetching\/builders\/stringcomparisonoptions","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StringComparisonOptions"}],"type":"topic","abstract":[{"type":"text","text":"Available options to compare strings"}],"role":"symbol","kind":"symbol"},"doc://SafeFetching/documentation/SafeFetching/Builders/CompoundPredicate":{"url":"\/documentation\/safefetching\/builders\/compoundpredicate","kind":"symbol","role":"symbol","title":"Builders.CompoundPredicate","type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate","abstract":[{"type":"text","text":"Predicate with "},{"code":"&&","type":"codeVoice"},{"type":"text","text":" (AND) or "},{"code":"||","type":"codeVoice"},{"type":"text","text":" (OR) operator to evaluate two predicates."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompoundPredicate"}],"navigatorTitle":[{"kind":"identifier","text":"CompoundPredicate"}]},"doc://SafeFetching/documentation/SafeFetching/DatabaseValue":{"kind":"symbol","title":"DatabaseValue","url":"\/documentation\/safefetching\/databasevalue","navigatorTitle":[{"text":"DatabaseValue","kind":"identifier"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseValue","kind":"identifier"}],"abstract":[{"text":"A type that can be used for an attribute in a predicate when fetching a CoreData store.","type":"text"}],"type":"topic"},"doc://SafeFetching/documentation/SafeFetching":{"type":"topic","abstract":[{"text":"Convenience functions around ","type":"text"},{"code":"CoreData","type":"codeVoice"},{"text":" fetching.","type":"text"}],"kind":"symbol","title":"SafeFetching","url":"\/documentation\/safefetching","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","role":"collection"},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate":{"type":"topic","url":"\/documentation\/safefetching\/builders\/predicate","abstract":[{"text":"Generated from ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember"},{"text":" operations to wrap a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Predicate","kind":"identifier"}],"navigatorTitle":[{"text":"Predicate","kind":"identifier"}],"title":"Builders.Predicate","role":"symbol","kind":"symbol"},"doc://SafeFetching/documentation/SafeFetching/FetchableMember":{"navigatorTitle":[{"kind":"identifier","text":"FetchableMember"}],"url":"\/documentation\/safefetching\/fetchablemember","role":"symbol","type":"topic","title":"FetchableMember","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FetchableMember"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","kind":"symbol","abstract":[{"type":"text","text":"Stores types and identifier of an entity and attribute or relationship that can be used for fetching."}]},"doc://SafeFetching/documentation/SafeFetching/DatabaseValueIdentification":{"type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseValueIdentification","kind":"identifier"}],"navigatorTitle":[{"text":"DatabaseValueIdentification","kind":"identifier"}],"abstract":[{"type":"text","text":"Stub type with internal init to ensure no conformance to "},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","type":"reference","isActive":true},{"type":"text","text":" can be added outside of the package."}],"role":"symbol","url":"\/documentation\/safefetching\/databasevalueidentification","kind":"symbol","title":"DatabaseValueIdentification"},"doc://SafeFetching/documentation/SafeFetching/Builders/Request/where(_:)-5uzqj":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`where`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"E"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Entity"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"FetchableMembers","preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Builders","preciseIdentifier":"s:12SafeFetching8BuildersO"},{"text":".","kind":"text"},{"text":"Predicate","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Builders","preciseIdentifier":"s:12SafeFetching8BuildersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Request","preciseIdentifier":"s:12SafeFetching8BuildersO7RequestV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PredicateStep","preciseIdentifier":"s:12SafeFetching13PredicateStepO"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"url":"\/documentation\/safefetching\/builders\/request\/where(_:)-5uzqj","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","abstract":[{"text":"Adds a predicate to the request.","type":"text"}],"kind":"symbol","type":"topic","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Entity","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Fetchable","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Step","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"TargetStep","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"FetchResult","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"where(_:)","role":"symbol"},"doc://SafeFetching/documentation/SafeFetching/DatabaseTestValue":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseTestValue"}],"navigatorTitle":[{"kind":"identifier","text":"DatabaseTestValue"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","url":"\/documentation\/safefetching\/databasetestvalue","title":"DatabaseTestValue","abstract":[{"type":"text","text":"A type that can be used in a predicate as a test value."}]}}}