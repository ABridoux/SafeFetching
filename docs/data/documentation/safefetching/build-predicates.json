{"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples in the article refer to this entity."}]},{"type":"codeListing","code":["@FetchableManagedObject","final class User: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var name: String? = \"\"","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When building a request, the "},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","type":"reference","isActive":true},{"type":"text","text":" operation allows to specify a predicate. For a demonstration purpose in this article, predicates are specified after their implicit declaration, as shown below."}]},{"type":"codeListing","code":["let predicate: Builders.Predicate<User> = .predicate { $0.name == \"Toto\" }"],"syntax":"swift"},{"type":"heading","text":"Comparison","anchor":"Comparison","level":2},{"inlineContent":[{"type":"text","text":"Comparison operators can be used with key paths to specify a property in the entity that should be compared to a test value."}],"type":"paragraph"},{"text":"Equality","type":"heading","level":6,"anchor":"Equality"},{"syntax":"swift","code":["$0.name == \"Toto\""],"type":"codeListing"},{"text":"Greater","type":"heading","level":6,"anchor":"Greater"},{"syntax":"swift","code":["$0.score > 20"],"type":"codeListing"},{"anchor":"Greater-than","type":"heading","level":6,"text":"Greater than"},{"syntax":"swift","code":["$0.score >= 20"],"type":"codeListing"},{"anchor":"Less","type":"heading","level":6,"text":"Less"},{"syntax":"swift","code":["$0.score < 20"],"type":"codeListing"},{"anchor":"Less-than","type":"heading","level":6,"text":"Less than"},{"syntax":"swift","code":["$0.score <= 20"],"type":"codeListing"},{"anchor":"Boolean","type":"heading","level":5,"text":"Boolean"},{"syntax":"swift","code":["$0.isAdmin"],"type":"codeListing"},{"syntax":"swift","code":["$0.isAdmin == true"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Inversion is supported.","type":"text"}]},{"syntax":"swift","code":["!$0.isAdmin"],"type":"codeListing"},{"anchor":"Advanced-Operations","type":"heading","level":2,"text":"Advanced Operations"},{"type":"paragraph","inlineContent":[{"text":"It’s possible to use the advanced operators offered by ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" safely by calling the dedicated function from ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","type":"reference","isActive":true},{"text":".","type":"text"}]},{"anchor":"Has-Prefix-String-property","type":"heading","level":6,"text":"Has Prefix (String property)"},{"syntax":"swift","code":["$0.name.hasPrefix(\"Do\")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions"},{"text":" can be provided to the call.","type":"text"}]},{"syntax":"swift","code":["$0.name.hasPrefix(\"Do\", options: .caseInsensitive)"],"type":"codeListing"},{"anchor":"Contains-String-property","type":"heading","level":6,"text":"Contains (String property)"},{"syntax":"swift","code":["$0.name.contains(\"Do\")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other examples on a numeric property"}]},{"anchor":"Is-In-Numeric-property","type":"heading","level":6,"text":"Is In (Numeric property)"},{"syntax":"swift","code":["$0.score.isIn(10...20)"],"type":"codeListing"},{"name":"Tip","style":"tip","type":"aside","content":[{"inlineContent":[{"type":"text","text":"By importing "},{"code":"SafeFetching","type":"codeVoice"},{"type":"text","text":" with "},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"type":"text","text":", more convenience functions are available such as extensions on collections to make the predicates even closer to Swift syntax, while still generating the proper format for "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"type":"codeListing","code":["(10...20).contains($0.score)"],"syntax":"swift"},{"level":6,"text":"Matches a Regular Expression (String property)","type":"heading","anchor":"Matches-a-Regular-Expression-String-property"},{"type":"codeListing","code":["$0.name.matches(\"[A-Za-z]{3}\")"],"syntax":"swift"},{"level":2,"text":"Compound","type":"heading","anchor":"Compound"},{"inlineContent":[{"text":"It’s possible to use the and ","type":"text"},{"code":"&&","type":"codeVoice"},{"text":" and or ","type":"text"},{"code":"||","type":"codeVoice"},{"text":" operators.","type":"text"}],"type":"paragraph"},{"level":5,"text":"And","type":"heading","anchor":"And"},{"type":"codeListing","code":["$0.name == \"Bruce\"","    && $0.score.isIn(20..<40)"],"syntax":"swift"},{"level":5,"text":"Or","type":"heading","anchor":"Or"},{"type":"codeListing","code":["$0.name == \"Bruce\"","    || $0.score.isIn(20..<40)"],"syntax":"swift"},{"level":5,"text":"Single booleans","type":"heading","anchor":"Single-booleans"},{"inlineContent":[{"text":"Compound predicates work with single booleans.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["$0.isAdmin && $0.score.isIn(20..<40)"],"syntax":"swift"},{"type":"codeListing","code":["!$0.isAdmin || $0.score.isIn(20..<40)"],"syntax":"swift"},{"level":3,"text":"And - And","type":"heading","anchor":"And-And"},{"inlineContent":[{"type":"text","text":"Composing predicates with compound predicates is done naturally"}],"type":"paragraph"},{"type":"codeListing","code":["$0.score.isIn(20..<40)","    && $0.name.hasPrefix(\"Do\")","    && $0.name.hasSuffix(\"remi\")"],"syntax":"swift"},{"level":3,"text":"And\/Or precedence","type":"heading","anchor":"AndOr-precedence"},{"inlineContent":[{"type":"text","text":"Since "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" precedes "},{"type":"codeVoice","code":"||"},{"type":"text","text":" in boolean expressions, it’s possible to enclose a predicate with brackets to prevent this behavior."}],"type":"paragraph"},{"type":"codeListing","code":["$0.score.isIn(20..<40)","    && ($0.name.hasPrefix(\"Do\") || $0.name.hasSuffix(\"remi\"))"],"syntax":"swift"},{"level":2,"text":"RawRepresentable","type":"heading","anchor":"RawRepresentable"},{"inlineContent":[{"type":"codeVoice","code":"RawRepresentable"},{"type":"text","text":" types can be used in the predicate when they conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue"},{"type":"text","text":" (and thus can be stored as their raw value in the CoreData store)."}],"type":"paragraph"},{"inlineContent":[{"text":"For instance with the ","type":"text"},{"type":"codeVoice","code":"Colors"},{"text":" enum:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct Colors: String, DatabaseValue, DatabaseTestValue {","    case red","    case blue","    case green","}"],"syntax":"swift"},{"inlineContent":[{"text":"Here are some possible predicates.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["{ members in members.color == .red }","{ members in members.color == color.isIn(.red, .blue) }"],"syntax":"swift"},{"level":3,"text":"Comparison predicates","type":"heading","anchor":"Comparison-predicates"},{"inlineContent":[{"type":"text","text":"The same comparison predicates are available:"}],"type":"paragraph"},{"type":"codeListing","code":["$0.color == .red"],"syntax":"swift"},{"type":"codeListing","code":["$0.color != .red"],"syntax":"swift"},{"level":3,"text":"Advanced predicates","type":"heading","anchor":"Advanced-predicates"},{"inlineContent":[{"type":"text","text":"The "},{"code":"isIn","type":"codeVoice"},{"text":" operator is also available to check that a collection contains an attribute.","type":"text"}],"type":"paragraph"},{"code":["$0.color.isIn(.red, .blue)"],"type":"codeListing","syntax":"swift"},{"code":["$0.color.isNotIn([.red, .blue])"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s also possible to use the "},{"type":"codeVoice","code":"contains"},{"type":"text","text":" function on the collection."}]},{"code":["[.red, .blue].contains($0.color)"],"type":"codeListing","syntax":"swift"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"To use functions declared in Swift protocols, such as ","type":"text"},{"type":"codeVoice","code":"Collection.contains(_:)"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"OptionSet.intersects(_:)"},{"text":", import SafeFetching with ","type":"text"},{"type":"codeVoice","code":"@_spi(SafeFetching)"},{"text":". This is to avoid cluttering","type":"text"},{"text":" ","type":"text"},{"text":"other modules.","type":"text"}]}]},{"type":"heading","text":"OptionSet","anchor":"OptionSet","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"With an "},{"type":"codeVoice","code":"OptionSet"},{"type":"text","text":", it’s advised to rather use the "},{"type":"codeVoice","code":"intersects"},{"type":"text","text":" predicates."},{"type":"text","text":" "},{"type":"text","text":"For instance with the "},{"type":"codeVoice","code":"Colors"},{"type":"text","text":" option set:"}]},{"type":"codeListing","syntax":"swift","code":["struct Colors: OptionSet, DatabaseValue, DatabaseTestValue {","    let rawValue: Int","","    static let red = StubOptionSet(rawValue: 1 << 0)","    static let blue = StubOptionSet(rawValue: 1 << 1)","    static let green = StubOptionSet(rawValue: 1 << 2)","}"]},{"type":"paragraph","inlineContent":[{"text":"The predicate is specified as follow:","type":"text"}]},{"code":["$0.color.intersects([.red, .blue])"],"type":"codeListing","syntax":"swift"},{"code":["[.red, .blue].intersects($0.color)"],"type":"codeListing","syntax":"swift"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"$0.color.intersects(.blue)","type":"codeVoice"},{"type":"text","text":" is only the same as "},{"code":"$0.color == .blue","type":"codeVoice"},{"type":"text","text":" when the stored "},{"code":"color","type":"codeVoice"},{"type":"text","text":" is a single option."}]}]},{"text":"Relationships","type":"heading","level":2,"anchor":"Relationships"},{"type":"paragraph","inlineContent":[{"text":"Predicates in SafeFetching support relationships. Given the two entities:","type":"text"}]},{"code":["@FetchableManagedObject","final class User: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var pet: Pet?","}","","@FetchableManagedObject","final class Pet: NSManagedObject {","    @NSManaged var name: String ","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The following predicate can be expressed for the ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" entity.","type":"text"}]},{"code":["$0.pet.name == \"Minouche\""],"type":"codeListing","syntax":"swift"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even if "},{"type":"codeVoice","code":"pet"},{"type":"text","text":" is an optional "},{"type":"codeVoice","code":"Pet"},{"type":"text","text":" relationship, SafeFetching has no concerns about it when specifying comparison. Optionals are not relevant when writing a "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" string format to fetch a CoreData store (unless of course when checking nullity)."}]}]},{"level":3,"text":"NSManagedObject","type":"heading","anchor":"NSManagedObject"},{"inlineContent":[{"text":"Testing a relationship against another entity is supported (it then uses the ","type":"text"},{"code":"objectID","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"code":["\/\/ otherPet: Pet","$0.pet == otherPet"],"syntax":"swift","type":"codeListing"},{"anchor":"NSManagedObject-Comparisons","level":2,"type":"heading","text":"NSManagedObject Comparisons"},{"inlineContent":[{"text":"Comparison of self is supported (it then uses the ","type":"text"},{"code":"objectID","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"code":["\/\/ someUser: User","$0 == someUser"],"syntax":"swift","type":"codeListing"},{"anchor":"Standalone-predicate","level":2,"type":"heading","text":"Standalone predicate"},{"inlineContent":[{"type":"text","text":"Using a "},{"type":"codeVoice","code":"where(_:)"},{"type":"text","text":" function is not the only way to make predicate."}],"type":"paragraph"},{"anchor":"NSPredicate-convenience","level":3,"type":"heading","text":"NSPredicate convenience"},{"inlineContent":[{"type":"text","text":"If needed, a predicate can be specified to make a "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let predicate: NSPredicate = .safe(on: User.self) { $0.score > 10 }"],"syntax":"swift","type":"codeListing"},{"anchor":"Static","level":3,"type":"heading","text":"Static"},{"inlineContent":[{"type":"text","text":"Also, a predicate can be provided with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate\/predicate(_:)-2fnp0"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["let predicate: Builders.Predicate<User> = .predicate { $0.score > 10 }"],"type":"codeListing"}]}],"metadata":{"modules":[{"name":"SafeFetching"}],"title":"Build Predicates","roleHeading":"Article","role":"article"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates"},"hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"seeAlsoSections":[{"generated":true,"title":"Build Predicates","anchor":"Build-Predicates","identifiers":["doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate"]}],"kind":"article","variants":[{"paths":["\/documentation\/safefetching\/build-predicates"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Learn how to safely specify predicates when building a request."}],"references":{"doc://SafeFetching/documentation/SafeFetching/DatabaseValue":{"abstract":[{"type":"text","text":"A type that can be used for an attribute in a predicate when fetching a CoreData store."}],"url":"\/documentation\/safefetching\/databasevalue","role":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseValue","kind":"identifier"}],"navigatorTitle":[{"text":"DatabaseValue","kind":"identifier"}],"type":"topic","title":"DatabaseValue","kind":"symbol"},"doc://SafeFetching/documentation/SafeFetching/Builders/Request/where(_:)-5uzqj":{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`where`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"FetchableMembers","preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Builders","preciseIdentifier":"s:12SafeFetching8BuildersO","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC","text":"Predicate"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO","text":"Builders"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO7RequestV","text":"Request"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Entity"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:12SafeFetching13PredicateStepO","kind":"typeIdentifier","text":"PredicateStep"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Entity","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Fetchable","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Step","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"TargetStep","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"FetchResult","type":"codeVoice"},{"text":".","type":"text"}]},"url":"\/documentation\/safefetching\/builders\/request\/where(_:)-5uzqj","abstract":[{"type":"text","text":"Adds a predicate to the request."}],"role":"symbol","kind":"symbol","title":"where(_:)"},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate/predicate(_:)-2fnp0":{"abstract":[],"role":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"predicate","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"FetchableMembers","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa"},{"text":") -> ","kind":"text"},{"text":"Builders","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Predicate","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Entity"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Builders","preciseIdentifier":"s:12SafeFetching8BuildersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Predicate","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Entity"},{"kind":"text","text":">"}],"title":"predicate(_:)","conformance":{"constraints":[{"type":"codeVoice","code":"Entity"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Fetchable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","url":"\/documentation\/safefetching\/builders\/predicate\/predicate(_:)-2fnp0","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate\/predicate(_:)-2fnp0"},"doc://SafeFetching/documentation/SafeFetching/DatabaseTestValue":{"url":"\/documentation\/safefetching\/databasetestvalue","kind":"symbol","title":"DatabaseTestValue","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DatabaseTestValue"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseTestValue"}],"abstract":[{"type":"text","text":"A type that can be used in a predicate as a test value."}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue"},"doc://SafeFetching/documentation/SafeFetching":{"abstract":[{"text":"Convenience functions around ","type":"text"},{"type":"codeVoice","code":"CoreData"},{"text":" fetching.","type":"text"}],"kind":"symbol","title":"SafeFetching","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","type":"topic","url":"\/documentation\/safefetching","role":"collection"},"doc://SafeFetching/documentation/SafeFetching/FetchableMember":{"url":"\/documentation\/safefetching\/fetchablemember","navigatorTitle":[{"text":"FetchableMember","kind":"identifier"}],"abstract":[{"text":"Stores types and identifier of an entity and attribute or relationship that can be used for fetching.","type":"text"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","title":"FetchableMember","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FetchableMember","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://SafeFetching/documentation/SafeFetching/Builders/StringComparisonOptions":{"type":"topic","abstract":[{"type":"text","text":"Available options to compare strings"}],"navigatorTitle":[{"text":"StringComparisonOptions","kind":"identifier"}],"role":"symbol","title":"Builders.StringComparisonOptions","kind":"symbol","url":"\/documentation\/safefetching\/builders\/stringcomparisonoptions","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringComparisonOptions","kind":"identifier"}]},"doc://SafeFetching/documentation/SafeFetching/Builders/CompoundPredicate":{"title":"Builders.CompoundPredicate","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Predicate with "},{"code":"&&","type":"codeVoice"},{"type":"text","text":" (AND) or "},{"code":"||","type":"codeVoice"},{"type":"text","text":" (OR) operator to evaluate two predicates."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompoundPredicate"}],"url":"\/documentation\/safefetching\/builders\/compoundpredicate","navigatorTitle":[{"kind":"identifier","text":"CompoundPredicate"}],"type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate"},"doc://SafeFetching/documentation/SafeFetching/DatabaseValueIdentification":{"abstract":[{"text":"Stub type with internal init to ensure no conformance to ","type":"text"},{"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","isActive":true},{"type":"text","text":" can be added outside of the package."}],"role":"symbol","title":"DatabaseValueIdentification","type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseValueIdentification","kind":"identifier"}],"url":"\/documentation\/safefetching\/databasevalueidentification","navigatorTitle":[{"text":"DatabaseValueIdentification","kind":"identifier"}],"kind":"symbol"},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate":{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","title":"Builders.Predicate","abstract":[{"text":"Generated from ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","isActive":true,"type":"reference"},{"text":" operations to wrap a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"Predicate","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Predicate","kind":"identifier"}],"type":"topic","url":"\/documentation\/safefetching\/builders\/predicate"}}}