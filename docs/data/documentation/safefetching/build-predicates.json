{"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"Examples in the article refer to this entity.","type":"text"}],"type":"paragraph"},{"code":["@FetchableManagedObject","final class StubEntity: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var name: String? = \"\"","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"When building a request, the "},{"isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","type":"reference"},{"type":"text","text":" operation allows to specify a predicate. For a demonstration purpose in this article, predicates are specified after their implicit declaration."}],"type":"paragraph"},{"code":["let predicate: Builders.Predicate<StubEntity>","$0.name == \"Toto\""],"type":"codeListing","syntax":"swift"},{"anchor":"Comparison","text":"Comparison","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Comparison operators can be used with key paths to specify a property in the entity that should be compared to a test value."}],"type":"paragraph"},{"anchor":"Equality","text":"Equality","type":"heading","level":6},{"code":["$0.name == \"Toto\""],"type":"codeListing","syntax":"swift"},{"anchor":"Greater","text":"Greater","type":"heading","level":6},{"code":["$0.score > 20"],"type":"codeListing","syntax":"swift"},{"anchor":"Greater-than","text":"Greater than","type":"heading","level":6},{"code":["$0.score >= 20"],"type":"codeListing","syntax":"swift"},{"anchor":"Less","text":"Less","type":"heading","level":6},{"code":["$0.score < 20"],"type":"codeListing","syntax":"swift"},{"anchor":"Less-than","text":"Less than","type":"heading","level":6},{"code":["$0.score <= 20"],"type":"codeListing","syntax":"swift"},{"anchor":"Boolean","text":"Boolean","type":"heading","level":5},{"code":["$0.isAdmin"],"type":"codeListing","syntax":"swift"},{"code":["$0.isAdmin == true"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Inversion is supported.","type":"text"}],"type":"paragraph"},{"code":["!$0.isAdmin"],"type":"codeListing","syntax":"swift"},{"anchor":"Advanced-Operations","text":"Advanced Operations","type":"heading","level":2},{"inlineContent":[{"text":"It’s possible to use the advanced operators offered by ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" safely by specifying calling the dedicated function from the "},{"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Has-Prefix-String-property","text":"Has Prefix (String property)","type":"heading","level":6},{"code":["$0.name.hasPrefix(\"Do\")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions","type":"reference","isActive":true},{"text":" can be provided to the call.","type":"text"}],"type":"paragraph"},{"code":["$0.name.hasPrefix(\"Do\", options: .caseInsensitive)"],"type":"codeListing","syntax":"swift"},{"anchor":"Contains-String-property","text":"Contains (String property)","type":"heading","level":6},{"code":["$0.name.contains(\"Do\")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Other examples on a numeric property"}],"type":"paragraph"},{"anchor":"Is-In-Numeric-property","text":"Is In (Numeric property)","type":"heading","level":6},{"code":["$0.score.isIn(10...20)"],"type":"codeListing","syntax":"swift"},{"style":"tip","name":"Tip","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"By importing ","type":"text"},{"type":"codeVoice","code":"SafeFetching"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"@_spi(SafeFetching)"},{"text":", more convenience functions are available such as extensions on collections to make the predicates even closer to Swift syntax, while still generating the proper format for ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":"."}]}]},{"syntax":"swift","type":"codeListing","code":["(10...20).contains($0.score)"]},{"text":"Matches a Regular Expression (string property)","anchor":"Matches-a-Regular-Expression-string-property","type":"heading","level":6},{"syntax":"swift","type":"codeListing","code":["$0.name.matches(\"[A-Za-z]{3}\")"]},{"text":"Compound","anchor":"Compound","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to use the and "},{"code":"&&","type":"codeVoice"},{"type":"text","text":" and or "},{"code":"||","type":"codeVoice"},{"type":"text","text":" operators."}]},{"text":"And","anchor":"And","type":"heading","level":5},{"syntax":"swift","type":"codeListing","code":["$0.name == \"Bruce\"","    && $0.score.isIn(20..<40)"]},{"text":"Or","anchor":"Or","type":"heading","level":5},{"syntax":"swift","type":"codeListing","code":["$0.name == \"Bruce\"","    || $0.score.isIn(20..<40)"]},{"text":"Single booleans","anchor":"Single-booleans","type":"heading","level":5},{"type":"paragraph","inlineContent":[{"text":"Compound predicates work with single booleans.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["$0.isAdmin && $0.score.isIn(20..<40)"]},{"syntax":"swift","type":"codeListing","code":["!$0.isAdmin || $0.score.isIn(20..<40)"]},{"text":"And - And","anchor":"And-And","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Composing predicates with compound predicates is done naturally"}]},{"syntax":"swift","type":"codeListing","code":["$0.score.isIn(20..<40)","    && $0.name.hasPrefix(\"Do\")","    && $0.name.hasSuffix(\"remi\")"]},{"text":"And\/Or precedence","anchor":"AndOr-precedence","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" precedes "},{"type":"codeVoice","code":"||"},{"text":" in boolean expressions, it’s possible to enclose a predicate with brackets to prevent this behavior.","type":"text"}]},{"type":"codeListing","code":["$0.score.isIn(20..<40)","    && ($0.name.hasPrefix(\"Do\") || $0.name.hasSuffix(\"remi\"))"],"syntax":"swift"},{"anchor":"RawRepresentable","type":"heading","level":2,"text":"RawRepresentable"},{"inlineContent":[{"type":"codeVoice","code":"RawRepresentable"},{"type":"text","text":" types can be used in the predicate when they conform to "},{"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","isActive":true},{"type":"text","text":" (and thus can be stored as their raw value in the CoreData store)."}],"type":"paragraph"},{"inlineContent":[{"text":"For instance with the ","type":"text"},{"code":"Colors","type":"codeVoice"},{"text":" enum:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct Colors: String {","    case red","    case blue","    case green","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Here are some possible predicates."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["{ members in members.color == .red }","{ members in members.color == color.isIn(.red, .blue) }"]},{"level":3,"text":"Comparison predicates","anchor":"Comparison-predicates","type":"heading"},{"inlineContent":[{"text":"The same comparison predicates are available:","type":"text"}],"type":"paragraph"},{"code":["$0.color == .red"],"syntax":"swift","type":"codeListing"},{"code":["$0.color != .red"],"syntax":"swift","type":"codeListing"},{"anchor":"Advanced-predicates","type":"heading","level":3,"text":"Advanced predicates"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"isIn"},{"type":"text","text":" operator is also available to check that a collection contains an attribute."}],"type":"paragraph"},{"code":["$0.color.isIn(.red, .blue)"],"syntax":"swift","type":"codeListing"},{"code":["$0.color.isNotIn([.red, .blue])"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"It’s also possible to use the "},{"type":"codeVoice","code":"contains"},{"type":"text","text":" function on the collection."}],"type":"paragraph"},{"code":["[.red, .blue].contains($0.color)"],"syntax":"swift","type":"codeListing"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To use functions declared in Swift protocols, such as "},{"type":"codeVoice","code":"Collection.contains(_:)"},{"type":"text","text":", or "},{"type":"codeVoice","code":"OptionSet.intersects(_:)"},{"type":"text","text":", import SafeFetching with "},{"type":"codeVoice","code":"@_spi(SafeFetching)"},{"type":"text","text":". This is to avoid cluttering"},{"type":"text","text":" "},{"type":"text","text":"other modules."}]}],"type":"aside","name":"Note"},{"anchor":"OptionSet","type":"heading","level":3,"text":"OptionSet"},{"inlineContent":[{"type":"text","text":"With an option set, it’s advised to rather use the "},{"code":"intersects","type":"codeVoice"},{"type":"text","text":" predicates."},{"type":"text","text":" "},{"type":"text","text":"For instance with the "},{"code":"Colors","type":"codeVoice"},{"type":"text","text":" option set:"}],"type":"paragraph"},{"code":["struct Colors: OptionSet {","    let rawValue: Int","","    static let red = StubOptionSet(rawValue: 1 << 0)","    static let blue = StubOptionSet(rawValue: 1 << 1)","    static let green = StubOptionSet(rawValue: 1 << 2)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The predicate is specified as follow:"}],"type":"paragraph"},{"code":["$0.color.intersects([.red, .blue])"],"syntax":"swift","type":"codeListing"},{"code":["[.red, .blue].intersects($0.color)"],"syntax":"swift","type":"codeListing"},{"anchor":"Comparing-Option-Set-Values","type":"heading","level":3,"text":"Comparing Option Set Values"},{"inlineContent":[{"text":"Do note that","type":"text"}],"type":"paragraph"},{"code":["$0.color.intersects(.blue)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"is only the same as","type":"text"}],"type":"paragraph"},{"code":["$0.color == .blue"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"when the stored "},{"type":"codeVoice","code":"color"},{"type":"text","text":" is a single option"}]},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Relationships","type":"heading","level":2,"text":"Relationships"},{"inlineContent":[{"text":"Predicates in SafeFetching support relationships. Given the two entities:","type":"text"}],"type":"paragraph"},{"code":["@FetchableManagedObject","final class StubEntity: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var pet: Pet?","}","","@FetchableManagedObject","final class Pet: NSManagedObject {","    @NSManaged var name: String ","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The following predicate can be expressed for the "},{"code":"User","type":"codeVoice"},{"type":"text","text":" entity."}],"type":"paragraph"},{"code":["$0.pet.name == \"Minouche\""],"syntax":"swift","type":"codeListing"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even if "},{"type":"codeVoice","code":"pet"},{"type":"text","text":" is an optional "},{"type":"codeVoice","code":"Pet"},{"type":"text","text":" relationship, SafeFetching has no concerns about it when specifying comparison. Optionals are not relevant when writing a "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" string format to fetch a CoreData store (unless of course when checking nullity)."}]}],"type":"aside","name":"Note"},{"anchor":"NSManagedObject","type":"heading","level":3,"text":"NSManagedObject"},{"inlineContent":[{"text":"Testing a relationship against another entity is supported (it then uses the ","type":"text"},{"code":"objectID","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"code":["\/\/ otherPet: Pet","$0.pet == otherPet"],"syntax":"swift","type":"codeListing"},{"anchor":"NSManagedObject-Comparisons","type":"heading","level":2,"text":"NSManagedObject Comparisons"},{"inlineContent":[{"text":"Comparison of self is supported (it then uses the ","type":"text"},{"code":"objectID","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"code":["\/\/ someUser: User","$0 == someUser"],"syntax":"swift","type":"codeListing"},{"anchor":"Standalone-predicate","type":"heading","level":2,"text":"Standalone predicate"},{"inlineContent":[{"type":"text","text":"Using a "},{"type":"codeVoice","code":"where(_:)"},{"type":"text","text":" function is not the only way to make predicate."}],"type":"paragraph"},{"anchor":"NSPredicate-convenience","type":"heading","level":3,"text":"NSPredicate convenience"},{"inlineContent":[{"type":"text","text":"If needed, a predicate can be specified to make a "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let predicate: NSPredicate = .safe(on: User.self) { $0.score > 10 }"],"syntax":"swift","type":"codeListing"},{"anchor":"Static","type":"heading","level":3,"text":"Static"},{"inlineContent":[{"type":"text","text":"Also, a predicate can be provided with "},{"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate\/predicate(_:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let predicate: Builders.Predicate<User> = .predicate { $0.score > 10 }"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate"],"anchor":"Build-Predicates","title":"Build Predicates"}],"identifier":{"url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates","interfaceLanguage":"swift"},"metadata":{"role":"article","title":"Build Predicates","modules":[{"name":"SafeFetching"}],"roleHeading":"Article"},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/safefetching\/build-predicates"]}],"abstract":[{"text":"Learn how to specify safe predicates safely when building a request.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"references":{"doc://SafeFetching/documentation/SafeFetching/DatabaseValue":{"type":"topic","kind":"symbol","navigatorTitle":[{"text":"DatabaseValue","kind":"identifier"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","url":"\/documentation\/safefetching\/databasevalue","abstract":[{"type":"text","text":"A type that can be used for an attribute in a predicate when fetching a CoreData store."}],"title":"DatabaseValue","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseValue","kind":"identifier"}]},"doc://SafeFetching/documentation/SafeFetching/Builders/Request/where(_:)-5uzqj":{"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Adds a predicate to the request."}],"url":"\/documentation\/safefetching\/builders\/request\/where(_:)-5uzqj","role":"symbol","title":"where(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`where`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"FetchableMembers","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa"},{"text":") -> ","kind":"text"},{"text":"Builders","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO"},{"text":".","kind":"text"},{"text":"Predicate","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC"},{"text":"<","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Builders","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO"},{"text":".","kind":"text"},{"text":"Request","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO7RequestV"},{"text":"<","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"PredicateStep","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching13PredicateStepO"},{"text":", ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","conformance":{"constraints":[{"code":"Entity","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Fetchable","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Step","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"TargetStep","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"FetchResult","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://SafeFetching/documentation/SafeFetching/Builders/CompoundPredicate":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompoundPredicate"}],"navigatorTitle":[{"kind":"identifier","text":"CompoundPredicate"}],"url":"\/documentation\/safefetching\/builders\/compoundpredicate","abstract":[{"text":"Predicate with ","type":"text"},{"code":"&&","type":"codeVoice"},{"text":" (AND) or ","type":"text"},{"code":"||","type":"codeVoice"},{"text":" (OR) operator to evaluate two predicates.","type":"text"}],"title":"Builders.CompoundPredicate","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate","type":"topic"},"doc://SafeFetching/documentation/SafeFetching/Builders/StringComparisonOptions":{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions","url":"\/documentation\/safefetching\/builders\/stringcomparisonoptions","type":"topic","title":"Builders.StringComparisonOptions","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"StringComparisonOptions"}],"abstract":[{"text":"Available options to compare strings","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StringComparisonOptions"}],"role":"symbol"},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate/predicate(_:)":{"url":"\/documentation\/safefetching\/builders\/predicate\/predicate(_:)","role":"symbol","type":"topic","title":"predicate(_:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Entity"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Fetchable"},{"type":"text","text":"."}]},"kind":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate\/predicate(_:)","abstract":[],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"predicate"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Entity"},{"kind":"text","text":"."},{"preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa","kind":"typeIdentifier","text":"FetchableMembers"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:12SafeFetching8BuildersO","kind":"typeIdentifier","text":"Builders"},{"text":".","kind":"text"},{"text":"Predicate","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC"},{"text":"<","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Builders","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO"},{"text":".","kind":"text"},{"text":"Predicate","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC"},{"text":"<","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://SafeFetching/documentation/SafeFetching/DatabaseValueIdentification":{"url":"\/documentation\/safefetching\/databasevalueidentification","type":"topic","title":"DatabaseValueIdentification","role":"symbol","kind":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","abstract":[{"type":"text","text":"Stub type with internal init to ensure no conformance to "},{"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","isActive":true},{"type":"text","text":" can be added outside of the package."}],"navigatorTitle":[{"kind":"identifier","text":"DatabaseValueIdentification"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseValueIdentification"}]},"doc://SafeFetching/documentation/SafeFetching/DatabaseTestValue":{"title":"DatabaseTestValue","url":"\/documentation\/safefetching\/databasetestvalue","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseTestValue"}],"navigatorTitle":[{"kind":"identifier","text":"DatabaseTestValue"}],"kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A type that can be used in a predicate as a test value."}]},"doc://SafeFetching/documentation/SafeFetching/FetchableMember":{"title":"FetchableMember","type":"topic","url":"\/documentation\/safefetching\/fetchablemember","abstract":[{"type":"text","text":"Stores types and identifier of an entity and attribute or relationship that can be used for fetching."}],"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FetchableMember","kind":"identifier"}],"navigatorTitle":[{"text":"FetchableMember","kind":"identifier"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember"},"doc://SafeFetching/documentation/SafeFetching":{"url":"\/documentation\/safefetching","abstract":[{"type":"text","text":"Convenience functions around "},{"type":"codeVoice","code":"CoreData"},{"type":"text","text":" fetching."}],"title":"SafeFetching","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","kind":"symbol","type":"topic","role":"collection"},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate":{"title":"Builders.Predicate","type":"topic","url":"\/documentation\/safefetching\/builders\/predicate","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Predicate"}],"abstract":[],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Predicate"}],"kind":"symbol"}}}