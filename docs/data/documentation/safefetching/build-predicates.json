{"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"modules":[{"name":"SafeFetching"}],"title":"Build Predicates","roleHeading":"Article","role":"article"},"abstract":[{"type":"text","text":"Learn how to safely specify predicates when building a request."}],"seeAlsoSections":[{"identifiers":["doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate"],"anchor":"Build-Predicates","title":"Build Predicates","generated":true}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples in the article refer to this entity."}]},{"syntax":"swift","type":"codeListing","code":["@FetchableManagedObject","final class User: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var name: String? = \"\"","}"]},{"type":"paragraph","inlineContent":[{"text":"When building a request, the ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","isActive":true,"type":"reference"},{"text":" operation allows to specify a predicate. For a demonstration purpose in this article, predicates are specified after their implicit declaration, as shown below.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let predicate: Builders.Predicate<User> = .predicate { $0.name == \"Toto\" }"]},{"level":2,"text":"Comparison","type":"heading","anchor":"Comparison"},{"type":"paragraph","inlineContent":[{"text":"Comparison operators can be used with key paths to specify a property in the entity that should be compared to a test value.","type":"text"}]},{"level":6,"text":"Equality","type":"heading","anchor":"Equality"},{"syntax":"swift","type":"codeListing","code":["$0.name == \"Toto\""]},{"level":6,"text":"Greater","type":"heading","anchor":"Greater"},{"code":["$0.score > 20"],"syntax":"swift","type":"codeListing"},{"anchor":"Greater-than","type":"heading","level":6,"text":"Greater than"},{"code":["$0.score >= 20"],"type":"codeListing","syntax":"swift"},{"anchor":"Less","type":"heading","level":6,"text":"Less"},{"code":["$0.score < 20"],"type":"codeListing","syntax":"swift"},{"anchor":"Less-than","type":"heading","level":6,"text":"Less than"},{"code":["$0.score <= 20"],"type":"codeListing","syntax":"swift"},{"anchor":"Boolean","type":"heading","level":5,"text":"Boolean"},{"code":["$0.isAdmin"],"type":"codeListing","syntax":"swift"},{"code":["$0.isAdmin == true"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Inversion is supported."}],"type":"paragraph"},{"code":["!$0.isAdmin"],"type":"codeListing","syntax":"swift"},{"anchor":"Advanced-Operations","type":"heading","level":2,"text":"Advanced Operations"},{"inlineContent":[{"text":"It’s possible to use the advanced operators offered by ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" safely by calling the dedicated function from ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Has-Prefix-String-property","type":"heading","level":6,"text":"Has Prefix (String property)"},{"code":["$0.name.hasPrefix(\"Do\")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions"},{"type":"text","text":" can be provided to the call."}]},{"syntax":"swift","type":"codeListing","code":["$0.name.hasPrefix(\"Do\", options: .caseInsensitive)"]},{"type":"heading","text":"Contains (String property)","anchor":"Contains-String-property","level":6},{"syntax":"swift","type":"codeListing","code":["$0.name.contains(\"Do\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other examples on a numeric property"}]},{"type":"heading","text":"Is In (Numeric property)","anchor":"Is-In-Numeric-property","level":6},{"syntax":"swift","type":"codeListing","code":["$0.score.isIn(10...20)"]},{"name":"Tip","type":"aside","style":"tip","content":[{"type":"paragraph","inlineContent":[{"text":"By importing ","type":"text"},{"code":"SafeFetching","type":"codeVoice"},{"type":"text","text":" with "},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"type":"text","text":", more convenience functions are available such as extensions on collections to make the predicates even closer to Swift syntax, while still generating the proper format for "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":"."}]}]},{"type":"codeListing","syntax":"swift","code":["(10...20).contains($0.score)"]},{"type":"heading","text":"Matches a Regular Expression (String property)","level":6,"anchor":"Matches-a-Regular-Expression-String-property"},{"code":["$0.name.matches(\"[A-Za-z]{3}\")"],"type":"codeListing","syntax":"swift"},{"text":"Compound","level":2,"type":"heading","anchor":"Compound"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to use the and "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" and or "},{"type":"codeVoice","code":"||"},{"type":"text","text":" operators."}]},{"text":"And","level":5,"type":"heading","anchor":"And"},{"syntax":"swift","code":["$0.name == \"Bruce\"","    && $0.score.isIn(20..<40)"],"type":"codeListing"},{"text":"Or","anchor":"Or","type":"heading","level":5},{"type":"codeListing","syntax":"swift","code":["$0.name == \"Bruce\"","    || $0.score.isIn(20..<40)"]},{"text":"Single booleans","anchor":"Single-booleans","type":"heading","level":5},{"inlineContent":[{"type":"text","text":"Compound predicates work with single booleans."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["$0.isAdmin && $0.score.isIn(20..<40)"]},{"type":"codeListing","syntax":"swift","code":["!$0.isAdmin || $0.score.isIn(20..<40)"]},{"text":"And - And","anchor":"And-And","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Composing predicates with compound predicates is done naturally","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["$0.score.isIn(20..<40)","    && $0.name.hasPrefix(\"Do\")","    && $0.name.hasSuffix(\"remi\")"]},{"type":"heading","anchor":"AndOr-precedence","text":"And\/Or precedence","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" precedes "},{"type":"codeVoice","code":"||"},{"type":"text","text":" in boolean expressions, it’s possible to enclose a predicate with brackets to prevent this behavior."}]},{"type":"codeListing","syntax":"swift","code":["$0.score.isIn(20..<40)","    && ($0.name.hasPrefix(\"Do\") || $0.name.hasSuffix(\"remi\"))"]},{"type":"heading","anchor":"RawRepresentable","text":"RawRepresentable","level":2},{"type":"paragraph","inlineContent":[{"code":"RawRepresentable","type":"codeVoice"},{"text":" types can be used in the predicate when they conform to ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableValue","isActive":true,"type":"reference"},{"text":". Since default implementation is provided, it’s only required to add the protocol conformance.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance with the "},{"type":"codeVoice","code":"Colors"},{"type":"text","text":" enum:"}]},{"type":"codeListing","syntax":"swift","code":["struct Colors: String, FetchableValue {","    case red","    case blue","    case green","}"]},{"type":"paragraph","inlineContent":[{"text":"Here are some possible predicates.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["{ members in members.color == .red }","{ members in members.color == color.isIn(.red, .blue) }"]},{"type":"heading","anchor":"Comparison-predicates","text":"Comparison predicates","level":3},{"type":"paragraph","inlineContent":[{"text":"The same comparison predicates are available:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["$0.color == .red"]},{"type":"codeListing","syntax":"swift","code":["$0.color != .red"]},{"type":"heading","anchor":"Advanced-predicates","text":"Advanced predicates","level":3},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"isIn"},{"text":" operator is also available to check that a collection contains an attribute.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["$0.color.isIn(.red, .blue)"]},{"type":"codeListing","syntax":"swift","code":["$0.color.isNotIn([.red, .blue])"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s also possible to use the "},{"type":"codeVoice","code":"contains"},{"type":"text","text":" function on the collection."}]},{"type":"codeListing","syntax":"swift","code":["[.red, .blue].contains($0.color)"]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To use functions declared in Swift protocols, such as "},{"type":"codeVoice","code":"Collection.contains(_:)"},{"type":"text","text":", or "},{"type":"codeVoice","code":"OptionSet.intersects(_:)"},{"type":"text","text":", import SafeFetching with "},{"type":"codeVoice","code":"@_spi(SafeFetching)"},{"type":"text","text":". This is to avoid cluttering"},{"type":"text","text":" "},{"type":"text","text":"other modules."}]}],"name":"Note"},{"type":"heading","anchor":"OptionSet","text":"OptionSet","level":3},{"type":"paragraph","inlineContent":[{"text":"With an ","type":"text"},{"code":"OptionSet","type":"codeVoice"},{"text":", it’s advised to rather use the ","type":"text"},{"code":"intersects","type":"codeVoice"},{"text":" predicates.","type":"text"},{"text":" ","type":"text"},{"text":"For instance with the ","type":"text"},{"code":"Colors","type":"codeVoice"},{"text":" option set:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Colors: OptionSet, FetchableValue {","    let rawValue: Int","","    static let red = StubOptionSet(rawValue: 1 << 0)","    static let blue = StubOptionSet(rawValue: 1 << 1)","    static let green = StubOptionSet(rawValue: 1 << 2)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The predicate is specified as follow:"}]},{"type":"codeListing","syntax":"swift","code":["$0.color.intersects([.red, .blue])"]},{"type":"codeListing","syntax":"swift","code":["[.red, .blue].intersects($0.color)"]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"$0.color.intersects(.blue)"},{"type":"text","text":" is only the same as "},{"type":"codeVoice","code":"$0.color == .blue"},{"type":"text","text":" when the stored "},{"type":"codeVoice","code":"color"},{"type":"text","text":" is a single option."}]}],"name":"Note"},{"type":"heading","anchor":"Relationships","text":"Relationships","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Predicates in SafeFetching support relationships. Given the three entities:"}]},{"type":"codeListing","syntax":"swift","code":["@FetchableManagedObject","final class User: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var pet: Pet?","    @NSManaged var coffeMugs: Set<Mug>","}","","@FetchableManagedObject","final class Pet: NSManagedObject {","    @NSManaged var name: String ","}","","@FetchableManagedObject","final class Mug: NSManagedObject {","    @NSManaged var color: MugColor ","}"]},{"type":"paragraph","inlineContent":[{"text":"The following predicate can be expressed for the ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" entity.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["$0.pet.name == \"Minouche\""]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Even if ","type":"text"},{"code":"pet","type":"codeVoice"},{"text":" is an optional ","type":"text"},{"code":"Pet","type":"codeVoice"},{"text":" relationship, SafeFetching has no concerns about it when specifying comparison. Optionals are not relevant when writing a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" string format to fetch a CoreData store (unless of course when checking nullity).","type":"text"}]}],"name":"Note"},{"type":"heading","anchor":"NSManagedObject","text":"NSManagedObject","level":3},{"type":"paragraph","inlineContent":[{"text":"Testing a relationship against another entity is supported (it then uses the ","type":"text"},{"code":"objectID","type":"codeVoice"},{"text":").","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ otherPet: Pet","$0.pet == otherPet","","\/\/ mug: Mug","$0.coffeeMugs.contains(mug)"]},{"type":"paragraph","inlineContent":[{"text":"Using ","type":"text"},{"type":"codeVoice","code":"NSManagedObjectID"},{"text":" for direct comparison is also supported.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["$0.pet == petObjectID","$0.coffeeMugs.contains(mugObjectID)"]},{"type":"heading","anchor":"NSManagedObject-Comparisons","text":"NSManagedObject Comparisons","level":2},{"type":"paragraph","inlineContent":[{"text":"Comparison of self is supported (it then uses the ","type":"text"},{"code":"objectID","type":"codeVoice"},{"text":").","type":"text"}]},{"code":["\/\/ someUser: User","$0 == someUser"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library also supports "},{"type":"codeVoice","code":"NSManagedObject"},{"type":"text","text":" and "},{"type":"codeVoice","code":"NSManagedObjectID"},{"type":"text","text":" comparisons."}]},{"syntax":"swift","code":["\/\/ someUser: User","$0 == userObjectID"],"type":"codeListing"},{"level":2,"text":"Standalone Predicate","anchor":"Standalone-Predicate","type":"heading"},{"inlineContent":[{"text":"Using a ","type":"text"},{"code":"where(_:)","type":"codeVoice"},{"text":" function is not the only way to make predicate.","type":"text"}],"type":"paragraph"},{"text":"NSPredicate convenience","anchor":"NSPredicate-convenience","level":3,"type":"heading"},{"inlineContent":[{"text":"If needed, a predicate can be specified to make a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["let predicate: NSPredicate = .safe(on: User.self) { $0.score > 10 }"],"syntax":"swift","type":"codeListing"},{"text":"Static","anchor":"Static","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Also, a predicate can be provided with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate\/predicate(_:)-2fnp0"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let predicate: Builders.Predicate<User> = .predicate { $0.score > 10 }"],"syntax":"swift","type":"codeListing"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/safefetching\/build-predicates"]}],"identifier":{"url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates","interfaceLanguage":"swift"},"references":{"doc://SafeFetching/documentation/SafeFetching/Builders/Request/where(_:)-5uzqj":{"type":"topic","abstract":[{"text":"Adds a predicate to the request.","type":"text"}],"conformance":{"constraints":[{"code":"Entity","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Fetchable","type":"codeVoice"},{"type":"text","text":", "},{"code":"Step","type":"codeVoice"},{"type":"text","text":" is "},{"code":"TargetStep","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"FetchResult","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","url":"\/documentation\/safefetching\/builders\/request\/where(_:)-5uzqj","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`where`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"FetchableMembers","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa"},{"text":") -> ","kind":"text"},{"text":"Builders","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC","text":"Predicate"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO","text":"Builders"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO7RequestV","text":"Request"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Entity"},{"text":", ","kind":"text"},{"text":"PredicateStep","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching13PredicateStepO"},{"text":", ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"where(_:)"},"doc://SafeFetching/documentation/SafeFetching":{"type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","kind":"symbol","role":"collection","title":"SafeFetching","url":"\/documentation\/safefetching","abstract":[{"text":"Convenience functions around ","type":"text"},{"code":"CoreData","type":"codeVoice"},{"text":" fetching.","type":"text"}]},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate/predicate(_:)-2fnp0":{"type":"topic","title":"predicate(_:)","abstract":[],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Entity","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Fetchable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"predicate"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Entity"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"FetchableMembers","preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Builders","preciseIdentifier":"s:12SafeFetching8BuildersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Predicate","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Entity"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Builders","preciseIdentifier":"s:12SafeFetching8BuildersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Predicate","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Entity"},{"kind":"text","text":">"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate\/predicate(_:)-2fnp0","role":"symbol","url":"\/documentation\/safefetching\/builders\/predicate\/predicate(_:)-2fnp0"},"doc://SafeFetching/documentation/SafeFetching/Builders/StringComparisonOptions":{"navigatorTitle":[{"kind":"identifier","text":"StringComparisonOptions"}],"kind":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions","url":"\/documentation\/safefetching\/builders\/stringcomparisonoptions","abstract":[{"type":"text","text":"Available options to compare strings"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StringComparisonOptions"}],"title":"Builders.StringComparisonOptions"},"doc://SafeFetching/documentation/SafeFetching/FetchableMember":{"title":"FetchableMember","type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","navigatorTitle":[{"text":"FetchableMember","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Stores types and identifier of an entity and attribute or relationship that can be used for fetching.","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FetchableMember","kind":"identifier"}],"url":"\/documentation\/safefetching\/fetchablemember"},"doc://SafeFetching/documentation/SafeFetching/FetchableValue":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FetchableValue"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableValue","abstract":[{"type":"text","text":"A type implementing this protocol can be used in a SafeFetching predicate when fetching a CoreData store."}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"FetchableValue"}],"url":"\/documentation\/safefetching\/fetchablevalue","role":"symbol","kind":"symbol","title":"FetchableValue"},"doc://SafeFetching/documentation/SafeFetching/Builders/CompoundPredicate":{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate","url":"\/documentation\/safefetching\/builders\/compoundpredicate","title":"Builders.CompoundPredicate","abstract":[{"type":"text","text":"Predicate with "},{"code":"&&","type":"codeVoice"},{"type":"text","text":" (AND) or "},{"code":"||","type":"codeVoice"},{"type":"text","text":" (OR) operator to evaluate two predicates."}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"CompoundPredicate"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompoundPredicate"}]},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate":{"type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","role":"symbol","abstract":[{"type":"text","text":"Generated from "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember"},{"type":"text","text":" operations to wrap a "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","navigatorTitle":[{"text":"Predicate","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Predicate","kind":"identifier"}],"title":"Builders.Predicate","url":"\/documentation\/safefetching\/builders\/predicate"}}}