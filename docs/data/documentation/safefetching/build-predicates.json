{"abstract":[{"type":"text","text":"Learn how to specify safe predicates safely when building a request."}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Examples in the article refer to this entity.","type":"text"}]},{"syntax":"swift","code":["@FetchableManagedObject","final class User: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var name: String? = \"\"","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"When building a request, the ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","isActive":true,"type":"reference"},{"text":" operation allows to specify a predicate. For a demonstration purpose in this article, predicates are specified after their implicit declaration, as shown below.","type":"text"}]},{"syntax":"swift","code":["let predicate: Builders.Predicate<User> = .predicate { $0.name == \"Toto\" }"],"type":"codeListing"},{"text":"Comparison","anchor":"Comparison","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Comparison operators can be used with key paths to specify a property in the entity that should be compared to a test value."}]},{"text":"Equality","anchor":"Equality","level":6,"type":"heading"},{"syntax":"swift","code":["$0.name == \"Toto\""],"type":"codeListing"},{"text":"Greater","anchor":"Greater","level":6,"type":"heading"},{"syntax":"swift","code":["$0.score > 20"],"type":"codeListing"},{"type":"heading","level":6,"text":"Greater than","anchor":"Greater-than"},{"type":"codeListing","syntax":"swift","code":["$0.score >= 20"]},{"type":"heading","level":6,"text":"Less","anchor":"Less"},{"type":"codeListing","syntax":"swift","code":["$0.score < 20"]},{"type":"heading","level":6,"text":"Less than","anchor":"Less-than"},{"type":"codeListing","syntax":"swift","code":["$0.score <= 20"]},{"type":"heading","level":5,"text":"Boolean","anchor":"Boolean"},{"type":"codeListing","syntax":"swift","code":["$0.isAdmin"]},{"type":"codeListing","syntax":"swift","code":["$0.isAdmin == true"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inversion is supported."}]},{"code":["!$0.isAdmin"],"syntax":"swift","type":"codeListing"},{"anchor":"Advanced-Operations","level":2,"text":"Advanced Operations","type":"heading"},{"inlineContent":[{"type":"text","text":"It’s possible to use the advanced operators offered by "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" safely by calling the dedicated function from "},{"isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Has-Prefix-String-property","level":6,"text":"Has Prefix (String property)","type":"heading"},{"code":["$0.name.hasPrefix(\"Do\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions","type":"reference","isActive":true},{"text":" can be provided to the call.","type":"text"}],"type":"paragraph"},{"code":["$0.name.hasPrefix(\"Do\", options: .caseInsensitive)"],"syntax":"swift","type":"codeListing"},{"anchor":"Contains-String-property","level":6,"text":"Contains (String property)","type":"heading"},{"code":["$0.name.contains(\"Do\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Other examples on a numeric property","type":"text"}],"type":"paragraph"},{"anchor":"Is-In-Numeric-property","level":6,"text":"Is In (Numeric property)","type":"heading"},{"code":["$0.score.isIn(10...20)"],"syntax":"swift","type":"codeListing"},{"name":"Tip","content":[{"type":"paragraph","inlineContent":[{"text":"By importing ","type":"text"},{"code":"SafeFetching","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"text":", more convenience functions are available such as extensions on collections to make the predicates even closer to Swift syntax, while still generating the proper format for ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":".","type":"text"}]}],"style":"tip","type":"aside"},{"code":["(10...20).contains($0.score)"],"syntax":"swift","type":"codeListing"},{"anchor":"Matches-a-Regular-Expression-String-property","level":6,"text":"Matches a Regular Expression (String property)","type":"heading"},{"code":["$0.name.matches(\"[A-Za-z]{3}\")"],"syntax":"swift","type":"codeListing"},{"anchor":"Compound","level":2,"text":"Compound","type":"heading"},{"inlineContent":[{"type":"text","text":"It’s possible to use the and "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" and or "},{"type":"codeVoice","code":"||"},{"type":"text","text":" operators."}],"type":"paragraph"},{"anchor":"And","level":5,"text":"And","type":"heading"},{"code":["$0.name == \"Bruce\"","    && $0.score.isIn(20..<40)"],"syntax":"swift","type":"codeListing"},{"anchor":"Or","level":5,"text":"Or","type":"heading"},{"code":["$0.name == \"Bruce\"","    || $0.score.isIn(20..<40)"],"syntax":"swift","type":"codeListing"},{"anchor":"Single-booleans","level":5,"text":"Single booleans","type":"heading"},{"inlineContent":[{"type":"text","text":"Compound predicates work with single booleans."}],"type":"paragraph"},{"code":["$0.isAdmin && $0.score.isIn(20..<40)"],"syntax":"swift","type":"codeListing"},{"code":["!$0.isAdmin || $0.score.isIn(20..<40)"],"syntax":"swift","type":"codeListing"},{"anchor":"And-And","level":3,"text":"And - And","type":"heading"},{"inlineContent":[{"type":"text","text":"Composing predicates with compound predicates is done naturally"}],"type":"paragraph"},{"code":["$0.score.isIn(20..<40)","    && $0.name.hasPrefix(\"Do\")","    && $0.name.hasSuffix(\"remi\")"],"syntax":"swift","type":"codeListing"},{"anchor":"AndOr-precedence","level":3,"text":"And\/Or precedence","type":"heading"},{"inlineContent":[{"text":"Since ","type":"text"},{"type":"codeVoice","code":"&&"},{"text":" precedes ","type":"text"},{"type":"codeVoice","code":"||"},{"text":" in boolean expressions, it’s possible to enclose a predicate with brackets to prevent this behavior.","type":"text"}],"type":"paragraph"},{"code":["$0.score.isIn(20..<40)","    && ($0.name.hasPrefix(\"Do\") || $0.name.hasSuffix(\"remi\"))"],"syntax":"swift","type":"codeListing"},{"anchor":"RawRepresentable","level":2,"text":"RawRepresentable","type":"heading"},{"inlineContent":[{"code":"RawRepresentable","type":"codeVoice"},{"type":"text","text":" types can be used in the predicate when they conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue"},{"type":"text","text":" (and thus can be stored as their raw value in the CoreData store)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For instance with the "},{"type":"codeVoice","code":"Colors"},{"type":"text","text":" enum:"}],"type":"paragraph"},{"code":["struct Colors: String, DatabaseValue, DatabaseTestValue {","    case red","    case blue","    case green","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Here are some possible predicates.","type":"text"}],"type":"paragraph"},{"code":["{ members in members.color == .red }","{ members in members.color == color.isIn(.red, .blue) }"],"syntax":"swift","type":"codeListing"},{"anchor":"Comparison-predicates","level":3,"text":"Comparison predicates","type":"heading"},{"inlineContent":[{"type":"text","text":"The same comparison predicates are available:"}],"type":"paragraph"},{"code":["$0.color == .red"],"syntax":"swift","type":"codeListing"},{"code":["$0.color != .red"],"syntax":"swift","type":"codeListing"},{"anchor":"Advanced-predicates","level":3,"text":"Advanced predicates","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"isIn","type":"codeVoice"},{"text":" operator is also available to check that a collection contains an attribute.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["$0.color.isIn(.red, .blue)"]},{"type":"codeListing","syntax":"swift","code":["$0.color.isNotIn([.red, .blue])"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s also possible to use the "},{"type":"codeVoice","code":"contains"},{"type":"text","text":" function on the collection."}]},{"type":"codeListing","syntax":"swift","code":["[.red, .blue].contains($0.color)"]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To use functions declared in Swift protocols, such as "},{"type":"codeVoice","code":"Collection.contains(_:)"},{"type":"text","text":", or "},{"type":"codeVoice","code":"OptionSet.intersects(_:)"},{"type":"text","text":", import SafeFetching with "},{"type":"codeVoice","code":"@_spi(SafeFetching)"},{"type":"text","text":". This is to avoid cluttering"},{"type":"text","text":" "},{"type":"text","text":"other modules."}]}],"style":"note","name":"Note"},{"type":"heading","anchor":"OptionSet","text":"OptionSet","level":3},{"type":"paragraph","inlineContent":[{"text":"With an ","type":"text"},{"code":"OptionSet","type":"codeVoice"},{"text":", it’s advised to rather use the ","type":"text"},{"code":"intersects","type":"codeVoice"},{"text":" predicates.","type":"text"},{"text":" ","type":"text"},{"text":"For instance with the ","type":"text"},{"code":"Colors","type":"codeVoice"},{"text":" option set:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Colors: OptionSet, DatabaseValue, DatabaseTestValue {","    let rawValue: Int","","    static let red = StubOptionSet(rawValue: 1 << 0)","    static let blue = StubOptionSet(rawValue: 1 << 1)","    static let green = StubOptionSet(rawValue: 1 << 2)","}"]},{"type":"paragraph","inlineContent":[{"text":"The predicate is specified as follow:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["$0.color.intersects([.red, .blue])"]},{"type":"codeListing","syntax":"swift","code":["[.red, .blue].intersects($0.color)"]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":""},{"code":"$0.color.intersects(.blue)","type":"codeVoice"},{"type":"text","text":" is only the same as "},{"code":"$0.color == .blue","type":"codeVoice"},{"type":"text","text":" when the stored "},{"code":"color","type":"codeVoice"},{"type":"text","text":" is a single option."}],"type":"paragraph"}],"style":"note","name":"Note"},{"type":"heading","anchor":"Relationships","text":"Relationships","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Predicates in SafeFetching support relationships. Given the two entities:"}]},{"type":"codeListing","syntax":"swift","code":["@FetchableManagedObject","final class User: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var pet: Pet?","}","","@FetchableManagedObject","final class Pet: NSManagedObject {","    @NSManaged var name: String ","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following predicate can be expressed for the "},{"type":"codeVoice","code":"User"},{"type":"text","text":" entity."}]},{"type":"codeListing","syntax":"swift","code":["$0.pet.name == \"Minouche\""]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Even if ","type":"text"},{"code":"pet","type":"codeVoice"},{"text":" is an optional ","type":"text"},{"code":"Pet","type":"codeVoice"},{"text":" relationship, SafeFetching has no concerns about it when specifying comparison. Optionals are not relevant when writing a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" string format to fetch a CoreData store (unless of course when checking nullity).","type":"text"}]}],"style":"note","name":"Note"},{"type":"heading","anchor":"NSManagedObject","text":"NSManagedObject","level":3},{"type":"paragraph","inlineContent":[{"text":"Testing a relationship against another entity is supported (it then uses the ","type":"text"},{"code":"objectID","type":"codeVoice"},{"text":").","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ otherPet: Pet","$0.pet == otherPet"]},{"type":"heading","anchor":"NSManagedObject-Comparisons","text":"NSManagedObject Comparisons","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Comparison of self is supported (it then uses the "},{"type":"codeVoice","code":"objectID"},{"type":"text","text":")."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ someUser: User","$0 == someUser"]},{"type":"heading","anchor":"Standalone-predicate","text":"Standalone predicate","level":2},{"type":"paragraph","inlineContent":[{"text":"Using a ","type":"text"},{"type":"codeVoice","code":"where(_:)"},{"text":" function is not the only way to make predicate.","type":"text"}]},{"type":"heading","anchor":"NSPredicate-convenience","text":"NSPredicate convenience","level":3},{"type":"paragraph","inlineContent":[{"text":"If needed, a predicate can be specified to make a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let predicate: NSPredicate = .safe(on: User.self) { $0.score > 10 }"]},{"type":"heading","anchor":"Static","text":"Static","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Also, a predicate can be provided with "},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate\/predicate(_:)","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["let predicate: Builders.Predicate<User> = .predicate { $0.score > 10 }"]}],"kind":"content"}],"sections":[],"seeAlsoSections":[{"generated":true,"anchor":"Build-Predicates","title":"Build Predicates","identifiers":["doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate"]}],"metadata":{"modules":[{"name":"SafeFetching"}],"role":"article","roleHeading":"Article","title":"Build Predicates"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/safefetching\/build-predicates"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates"},"kind":"article","references":{"doc://SafeFetching/documentation/SafeFetching/DatabaseValueIdentification":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Stub type with internal init to ensure no conformance to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue"},{"type":"text","text":" can be added outside of the package."}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","title":"DatabaseValueIdentification","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseValueIdentification"}],"url":"\/documentation\/safefetching\/databasevalueidentification","navigatorTitle":[{"kind":"identifier","text":"DatabaseValueIdentification"}]},"doc://SafeFetching/documentation/SafeFetching/Builders/StringComparisonOptions":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"StringComparisonOptions"}],"title":"Builders.StringComparisonOptions","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StringComparisonOptions"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions","abstract":[{"text":"Available options to compare strings","type":"text"}],"url":"\/documentation\/safefetching\/builders\/stringcomparisonoptions","kind":"symbol","role":"symbol"},"doc://SafeFetching/documentation/SafeFetching/Builders/CompoundPredicate":{"abstract":[{"type":"text","text":"Predicate with "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" (AND) or "},{"type":"codeVoice","code":"||"},{"type":"text","text":" (OR) operator to evaluate two predicates."}],"navigatorTitle":[{"kind":"identifier","text":"CompoundPredicate"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompoundPredicate"}],"url":"\/documentation\/safefetching\/builders\/compoundpredicate","type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate","title":"Builders.CompoundPredicate","role":"symbol"},"doc://SafeFetching/documentation/SafeFetching/Builders/Request/where(_:)-5uzqj":{"url":"\/documentation\/safefetching\/builders\/request\/where(_:)-5uzqj","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`where`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"E"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Entity"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa","text":"FetchableMembers"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO","text":"Builders"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC","text":"Predicate"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO","text":"Builders"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO7RequestV","text":"Request"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Entity"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching13PredicateStepO","text":"PredicateStep"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"title":"where(_:)","abstract":[{"type":"text","text":"Adds a predicate to the request."}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Entity"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Fetchable"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Step"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"TargetStep"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"FetchResult"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol"},"doc://SafeFetching/documentation/SafeFetching/DatabaseTestValue":{"title":"DatabaseTestValue","abstract":[{"type":"text","text":"A type that can be used in a predicate as a test value."}],"type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseTestValue","kind":"identifier"}],"url":"\/documentation\/safefetching\/databasetestvalue","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","role":"symbol","navigatorTitle":[{"text":"DatabaseTestValue","kind":"identifier"}]},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate/predicate(_:)":{"abstract":[],"kind":"symbol","type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate\/predicate(_:)","url":"\/documentation\/safefetching\/builders\/predicate\/predicate(_:)","title":"predicate(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"predicate","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"FetchableMembers","preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Builders","preciseIdentifier":"s:12SafeFetching8BuildersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Predicate","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Builders","preciseIdentifier":"s:12SafeFetching8BuildersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Predicate","preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Entity","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Fetchable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol"},"doc://SafeFetching/documentation/SafeFetching/FetchableMember":{"role":"symbol","abstract":[{"text":"Stores types and identifier of an entity and attribute or relationship that can be used for fetching.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FetchableMember","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","url":"\/documentation\/safefetching\/fetchablemember","kind":"symbol","navigatorTitle":[{"text":"FetchableMember","kind":"identifier"}],"title":"FetchableMember"},"doc://SafeFetching/documentation/SafeFetching/DatabaseValue":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseValue"}],"type":"topic","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","abstract":[{"type":"text","text":"A type that can be used for an attribute in a predicate when fetching a CoreData store."}],"role":"symbol","title":"DatabaseValue","url":"\/documentation\/safefetching\/databasevalue","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"DatabaseValue"}]},"doc://SafeFetching/documentation/SafeFetching":{"role":"collection","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","kind":"symbol","abstract":[{"type":"text","text":"Convenience functions around "},{"type":"codeVoice","code":"CoreData"},{"type":"text","text":" fetching."}],"type":"topic","title":"SafeFetching","url":"\/documentation\/safefetching"},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate":{"title":"Builders.Predicate","kind":"symbol","abstract":[{"text":"Generated from ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember"},{"text":" operations to wrap a ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Predicate","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Predicate","kind":"identifier"}],"type":"topic","url":"\/documentation\/safefetching\/builders\/predicate","role":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate"}}}