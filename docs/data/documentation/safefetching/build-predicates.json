{"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Learn how to safely specify predicates when building a request.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/build-predicates"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/safefetching\/build-predicates"]}],"metadata":{"title":"Build Predicates","role":"article","modules":[{"name":"SafeFetching"}],"roleHeading":"Article"},"sections":[],"hierarchy":{"paths":[["doc:\/\/SafeFetching\/documentation\/SafeFetching"]]},"primaryContentSections":[{"content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"Examples in the article refer to this entity."}],"type":"paragraph"},{"code":["@FetchableManagedObject","final class User: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var name: String? = \"\"","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"When building a request, the "},{"isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","type":"reference"},{"type":"text","text":" operation allows to specify a predicate. For a demonstration purpose in this article, predicates are specified after their implicit declaration, as shown below."}],"type":"paragraph"},{"code":["let predicate: Builders.Predicate<User> = .predicate { $0.name == \"Toto\" }"],"syntax":"swift","type":"codeListing"},{"anchor":"Comparison","level":2,"type":"heading","text":"Comparison"},{"inlineContent":[{"text":"Comparison operators can be used with key paths to specify a property in the entity that should be compared to a test value.","type":"text"}],"type":"paragraph"},{"anchor":"Equality","level":6,"type":"heading","text":"Equality"},{"code":["$0.name == \"Toto\""],"syntax":"swift","type":"codeListing"},{"anchor":"Greater","level":6,"type":"heading","text":"Greater"},{"code":["$0.score > 20"],"syntax":"swift","type":"codeListing"},{"anchor":"Greater-than","level":6,"type":"heading","text":"Greater than"},{"code":["$0.score >= 20"],"syntax":"swift","type":"codeListing"},{"anchor":"Less","level":6,"type":"heading","text":"Less"},{"code":["$0.score < 20"],"syntax":"swift","type":"codeListing"},{"anchor":"Less-than","level":6,"type":"heading","text":"Less than"},{"code":["$0.score <= 20"],"syntax":"swift","type":"codeListing"},{"anchor":"Boolean","level":5,"type":"heading","text":"Boolean"},{"code":["$0.isAdmin"],"syntax":"swift","type":"codeListing"},{"code":["$0.isAdmin == true"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Inversion is supported.","type":"text"}],"type":"paragraph"},{"code":["!$0.isAdmin"],"syntax":"swift","type":"codeListing"},{"anchor":"Advanced-Operations","level":2,"type":"heading","text":"Advanced Operations"},{"inlineContent":[{"text":"It’s possible to use the advanced operators offered by ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" safely by calling the dedicated function from ","type":"text"},{"type":"reference","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Has-Prefix-String-property","level":6,"type":"heading","text":"Has Prefix (String property)"},{"code":["$0.name.hasPrefix(\"Do\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions","type":"reference"},{"text":" can be provided to the call.","type":"text"}],"type":"paragraph"},{"code":["$0.name.hasPrefix(\"Do\", options: .caseInsensitive)"],"syntax":"swift","type":"codeListing"},{"anchor":"Contains-String-property","level":6,"type":"heading","text":"Contains (String property)"},{"code":["$0.name.contains(\"Do\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Other examples on a numeric property","type":"text"}],"type":"paragraph"},{"anchor":"Is-In-Numeric-property","level":6,"type":"heading","text":"Is In (Numeric property)"},{"code":["$0.score.isIn(10...20)"],"syntax":"swift","type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"text":"By importing ","type":"text"},{"code":"SafeFetching","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"text":", more convenience functions are available such as extensions on collections to make the predicates even closer to Swift syntax, while still generating the proper format for ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"aside","style":"tip","name":"Tip"},{"code":["(10...20).contains($0.score)"],"syntax":"swift","type":"codeListing"},{"anchor":"Matches-a-Regular-Expression-String-property","level":6,"type":"heading","text":"Matches a Regular Expression (String property)"},{"code":["$0.name.matches(\"[A-Za-z]{3}\")"],"syntax":"swift","type":"codeListing"},{"anchor":"Compound","level":2,"type":"heading","text":"Compound"},{"inlineContent":[{"text":"It’s possible to use the and ","type":"text"},{"code":"&&","type":"codeVoice"},{"text":" and or ","type":"text"},{"code":"||","type":"codeVoice"},{"text":" operators.","type":"text"}],"type":"paragraph"},{"anchor":"And","level":5,"type":"heading","text":"And"},{"code":["$0.name == \"Bruce\"","    && $0.score.isIn(20..<40)"],"syntax":"swift","type":"codeListing"},{"anchor":"Or","level":5,"type":"heading","text":"Or"},{"code":["$0.name == \"Bruce\"","    || $0.score.isIn(20..<40)"],"syntax":"swift","type":"codeListing"},{"anchor":"Single-booleans","level":5,"type":"heading","text":"Single booleans"},{"inlineContent":[{"text":"Compound predicates work with single booleans.","type":"text"}],"type":"paragraph"},{"code":["$0.isAdmin && $0.score.isIn(20..<40)"],"syntax":"swift","type":"codeListing"},{"code":["!$0.isAdmin || $0.score.isIn(20..<40)"],"syntax":"swift","type":"codeListing"},{"anchor":"And-And","level":3,"type":"heading","text":"And - And"},{"inlineContent":[{"text":"Composing predicates with compound predicates is done naturally","type":"text"}],"type":"paragraph"},{"code":["$0.score.isIn(20..<40)","    && $0.name.hasPrefix(\"Do\")","    && $0.name.hasSuffix(\"remi\")"],"syntax":"swift","type":"codeListing"},{"anchor":"AndOr-precedence","level":3,"type":"heading","text":"And\/Or precedence"},{"inlineContent":[{"type":"text","text":"Since "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" precedes "},{"type":"codeVoice","code":"||"},{"type":"text","text":" in boolean expressions, it’s possible to enclose a predicate with brackets to prevent this behavior."}],"type":"paragraph"},{"code":["$0.score.isIn(20..<40)","    && ($0.name.hasPrefix(\"Do\") || $0.name.hasSuffix(\"remi\"))"],"syntax":"swift","type":"codeListing"},{"anchor":"RawRepresentable","level":2,"type":"heading","text":"RawRepresentable"},{"inlineContent":[{"type":"codeVoice","code":"RawRepresentable"},{"text":" types can be used in the predicate when they conform to ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","isActive":true,"type":"reference"},{"text":" (and thus can be stored as their raw value in the CoreData store).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For instance with the ","type":"text"},{"code":"Colors","type":"codeVoice"},{"text":" enum:","type":"text"}],"type":"paragraph"},{"code":["struct Colors: String, DatabaseValue, DatabaseTestValue {","    case red","    case blue","    case green","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Here are some possible predicates.","type":"text"}],"type":"paragraph"},{"code":["{ members in members.color == .red }","{ members in members.color == color.isIn(.red, .blue) }"],"syntax":"swift","type":"codeListing"},{"anchor":"Comparison-predicates","level":3,"type":"heading","text":"Comparison predicates"},{"inlineContent":[{"text":"The same comparison predicates are available:","type":"text"}],"type":"paragraph"},{"code":["$0.color == .red"],"syntax":"swift","type":"codeListing"},{"code":["$0.color != .red"],"syntax":"swift","type":"codeListing"},{"anchor":"Advanced-predicates","level":3,"type":"heading","text":"Advanced predicates"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"isIn","type":"codeVoice"},{"text":" operator is also available to check that a collection contains an attribute.","type":"text"}],"type":"paragraph"},{"code":["$0.color.isIn(.red, .blue)"],"syntax":"swift","type":"codeListing"},{"code":["$0.color.isNotIn([.red, .blue])"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"It’s also possible to use the "},{"type":"codeVoice","code":"contains"},{"type":"text","text":" function on the collection."}],"type":"paragraph"},{"code":["[.red, .blue].contains($0.color)"],"syntax":"swift","type":"codeListing"},{"content":[{"inlineContent":[{"text":"To use functions declared in Swift protocols, such as ","type":"text"},{"code":"Collection.contains(_:)","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"OptionSet.intersects(_:)","type":"codeVoice"},{"text":", import SafeFetching with ","type":"text"},{"code":"@_spi(SafeFetching)","type":"codeVoice"},{"text":". This is to avoid cluttering","type":"text"},{"text":" ","type":"text"},{"text":"other modules.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"},{"anchor":"OptionSet","level":3,"type":"heading","text":"OptionSet"},{"inlineContent":[{"text":"With an ","type":"text"},{"code":"OptionSet","type":"codeVoice"},{"text":", it’s advised to rather use the ","type":"text"},{"code":"intersects","type":"codeVoice"},{"text":" predicates.","type":"text"},{"text":" ","type":"text"},{"text":"For instance with the ","type":"text"},{"code":"Colors","type":"codeVoice"},{"text":" option set:","type":"text"}],"type":"paragraph"},{"code":["struct Colors: OptionSet, DatabaseValue, DatabaseTestValue {","    let rawValue: Int","","    static let red = StubOptionSet(rawValue: 1 << 0)","    static let blue = StubOptionSet(rawValue: 1 << 1)","    static let green = StubOptionSet(rawValue: 1 << 2)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The predicate is specified as follow:","type":"text"}],"type":"paragraph"},{"code":["$0.color.intersects([.red, .blue])"],"syntax":"swift","type":"codeListing"},{"code":["[.red, .blue].intersects($0.color)"],"syntax":"swift","type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"$0.color.intersects(.blue)","type":"codeVoice"},{"type":"text","text":" is only the same as "},{"code":"$0.color == .blue","type":"codeVoice"},{"type":"text","text":" when the stored "},{"code":"color","type":"codeVoice"},{"type":"text","text":" is a single option."}]}],"type":"aside","style":"note","name":"Note"},{"anchor":"Relationships","level":2,"type":"heading","text":"Relationships"},{"inlineContent":[{"type":"text","text":"Predicates in SafeFetching support relationships. Given the two entities:"}],"type":"paragraph"},{"code":["@FetchableManagedObject","final class User: NSManagedObject {","    @NSManaged var score = 0.0","    @NSManaged var pet: Pet?","}","","@FetchableManagedObject","final class Pet: NSManagedObject {","    @NSManaged var name: String ","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The following predicate can be expressed for the ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" entity.","type":"text"}],"type":"paragraph"},{"code":["$0.pet.name == \"Minouche\""],"syntax":"swift","type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Even if ","type":"text"},{"code":"pet","type":"codeVoice"},{"text":" is an optional ","type":"text"},{"code":"Pet","type":"codeVoice"},{"text":" relationship, SafeFetching has no concerns about it when specifying comparison. Optionals are not relevant when writing a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" string format to fetch a CoreData store (unless of course when checking nullity).","type":"text"}]}],"type":"aside","style":"note","name":"Note"},{"anchor":"NSManagedObject","level":3,"type":"heading","text":"NSManagedObject"},{"inlineContent":[{"text":"Testing a relationship against another entity is supported (it then uses the ","type":"text"},{"code":"objectID","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"code":["\/\/ otherPet: Pet","$0.pet == otherPet"],"syntax":"swift","type":"codeListing"},{"anchor":"NSManagedObject-Comparisons","level":2,"type":"heading","text":"NSManagedObject Comparisons"},{"inlineContent":[{"text":"Comparison of self is supported (it then uses the ","type":"text"},{"code":"objectID","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"code":["\/\/ someUser: User","$0 == someUser"],"syntax":"swift","type":"codeListing"},{"anchor":"Standalone-predicate","level":2,"type":"heading","text":"Standalone predicate"},{"inlineContent":[{"type":"text","text":"Using a "},{"type":"codeVoice","code":"where(_:)"},{"type":"text","text":" function is not the only way to make predicate."}],"type":"paragraph"},{"anchor":"NSPredicate-convenience","level":3,"type":"heading","text":"NSPredicate convenience"},{"inlineContent":[{"type":"text","text":"If needed, a predicate can be specified to make a "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let predicate: NSPredicate = .safe(on: User.self) { $0.score > 10 }"],"syntax":"swift","type":"codeListing"},{"anchor":"Static","level":3,"type":"heading","text":"Static"},{"inlineContent":[{"type":"text","text":"Also, a predicate can be provided with "},{"type":"codeVoice","code":"Builders\/Predicate\/predicate(_:)"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let predicate: Builders.Predicate<User> = .predicate { $0.score > 10 }"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification","doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate"],"title":"Build Predicates","anchor":"Build-Predicates"}],"references":{"doc://SafeFetching/documentation/SafeFetching/DatabaseValue":{"url":"\/documentation\/safefetching\/databasevalue","kind":"symbol","abstract":[{"type":"text","text":"A type that can be used for an attribute in a predicate when fetching a CoreData store."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"DatabaseValue","kind":"identifier"}],"title":"DatabaseValue","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseValue","kind":"identifier"}]},"doc://SafeFetching/documentation/SafeFetching/Builders/Predicate":{"url":"\/documentation\/safefetching\/builders\/predicate","abstract":[{"text":"Generated from ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","type":"reference"},{"text":" operations to wrap a ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Predicate","kind":"identifier"}],"navigatorTitle":[{"text":"Predicate","kind":"identifier"}],"title":"Builders.Predicate","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Predicate","role":"symbol"},"doc://SafeFetching/documentation/SafeFetching/DatabaseValueIdentification":{"type":"topic","abstract":[{"type":"text","text":"Stub type with internal init to ensure no conformance to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValue"},{"type":"text","text":" can be added outside of the package."}],"navigatorTitle":[{"kind":"identifier","text":"DatabaseValueIdentification"}],"url":"\/documentation\/safefetching\/databasevalueidentification","kind":"symbol","title":"DatabaseValueIdentification","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseValueIdentification"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseValueIdentification"},"doc://SafeFetching/documentation/SafeFetching":{"role":"collection","abstract":[{"text":"Convenience functions around ","type":"text"},{"type":"codeVoice","code":"CoreData"},{"text":" fetching.","type":"text"}],"title":"SafeFetching","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching","url":"\/documentation\/safefetching","type":"topic","kind":"symbol"},"doc://SafeFetching/documentation/SafeFetching/Builders/CompoundPredicate":{"url":"\/documentation\/safefetching\/builders\/compoundpredicate","abstract":[{"type":"text","text":"Predicate with "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" (AND) or "},{"type":"codeVoice","code":"||"},{"type":"text","text":" (OR) operator to evaluate two predicates."}],"role":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/CompoundPredicate","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CompoundPredicate","kind":"identifier"}],"title":"Builders.CompoundPredicate","kind":"symbol","navigatorTitle":[{"text":"CompoundPredicate","kind":"identifier"}],"type":"topic"},"doc://SafeFetching/documentation/SafeFetching/Builders/StringComparisonOptions":{"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/StringComparisonOptions","abstract":[{"text":"Available options to compare strings","type":"text"}],"navigatorTitle":[{"text":"StringComparisonOptions","kind":"identifier"}],"url":"\/documentation\/safefetching\/builders\/stringcomparisonoptions","title":"Builders.StringComparisonOptions","role":"symbol","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringComparisonOptions","kind":"identifier"}],"type":"topic"},"doc://SafeFetching/documentation/SafeFetching/FetchableMember":{"kind":"symbol","url":"\/documentation\/safefetching\/fetchablemember","abstract":[{"text":"Stores types and identifier of an entity and attribute or relationship that can be used for fetching.","type":"text"}],"identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/FetchableMember","title":"FetchableMember","navigatorTitle":[{"text":"FetchableMember","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FetchableMember","kind":"identifier"}],"type":"topic"},"doc://SafeFetching/documentation/SafeFetching/Builders/Request/where(_:)-5uzqj":{"role":"symbol","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/Builders\/Request\/where(_:)-5uzqj","abstract":[{"type":"text","text":"Adds a predicate to the request."}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Entity","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Fetchable","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Step","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"TargetStep","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"FetchResult","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"where(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`where`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"FetchableMembers","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching9FetchableP0C7MembersQa"},{"text":") -> ","kind":"text"},{"text":"Builders","kind":"typeIdentifier","preciseIdentifier":"s:12SafeFetching8BuildersO"},{"text":".","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO9PredicateC","text":"Predicate","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO","text":"Builders","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:12SafeFetching8BuildersO7RequestV","text":"Request","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Entity","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:12SafeFetching13PredicateStepO","text":"PredicateStep","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","url":"\/documentation\/safefetching\/builders\/request\/where(_:)-5uzqj","type":"topic"},"doc://SafeFetching/documentation/SafeFetching/DatabaseTestValue":{"abstract":[{"type":"text","text":"A type that can be used in a predicate as a test value."}],"kind":"symbol","type":"topic","title":"DatabaseTestValue","identifier":"doc:\/\/SafeFetching\/documentation\/SafeFetching\/DatabaseTestValue","navigatorTitle":[{"text":"DatabaseTestValue","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseTestValue","kind":"identifier"}],"url":"\/documentation\/safefetching\/databasetestvalue"}}}